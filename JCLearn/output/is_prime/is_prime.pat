	Label	Killed	Alive	Type	Location	Words	Line	Code
@Pattern	Killed	41	3	#expr	RelationExpression[408]	[]	592	"x < 2"
@Pattern	Alive	0	2	#expr	RelationExpression[408]	['-((x) < (2))']	592	"x < 2"
@Pattern	Killed	41	3	#expr	RelationExpression[408]	['not_bool']	592	"x < 2"
@Pattern	Alive	0	2	#expr	RelationExpression[408]	['-((x) < (2))', 'not_bool']	592	"x < 2"
@Pattern	Killed	606	133	#cons	IfStatement[503]	[]	614	"for(k = 1; k < argc; k++)  {   number = atoi(argv[k]);   if(is_prime(number))   {    fprintf(stdout, "%d; ", number);   }  }"
@Pattern	Killed	529	104	#cons	IfStatement[503]	['(k) < (argc)']	614	"for(k = 1; k < argc; k++)  {   number = atoi(argv[k]);   if(is_prime(number))   {    fprintf(stdout, "%d; ", number);   }  }"
@Pattern	Killed	412	83	#cons	IfStatement[409]	[]	592	"if(x < 2)     {         return 0;     }     else     {         n = (int) (sqrt(x));         for(k = 2; k <= n; k++)         {             if( (x % k) == 0 )             {                 return 0;             }         }         return 1;     }"
@Pattern	Killed	76	5	#cons	IfStatement[409]	['true']	592	"if(x < 2)     {         return 0;     }     else     {         n = (int) (sqrt(x));         for(k = 2; k <= n; k++)         {             if( (x % k) == 0 )             {                 return 0;             }         }         return 1;     }"
@Pattern	Killed	279	43	#cons	CallStatement[524]	[]	617	"is_prime(number)"
@Pattern	Killed	279	43	#cons	CallStatement[524]	['true']	617	"is_prime(number)"
@Pattern	Killed	33	2	#trap	IfStatement[409]	[]	592	"if(x < 2)     {         return 0;     }     else     {         n = (int) (sqrt(x));         for(k = 2; k <= n; k++)         {             if( (x % k) == 0 )             {                 return 0;             }         }         return 1;     }"
@Pattern	Killed	33	2	#trap	IfStatement[409]	['trapping']	592	"if(x < 2)     {         return 0;     }     else     {         n = (int) (sqrt(x));         for(k = 2; k <= n; k++)         {             if( (x % k) == 0 )             {                 return 0;             }         }         return 1;     }"
@Pattern	Killed	12	0	#expr	Identifier[406]	[]	592	"x"
@Pattern	Killed	11	1	#expr	ConstExpression[407]	[]	592	"2"
@Pattern	Killed	2	1	#expr	ConstExpression[407]	['-(2)']	592	"2"
@Pattern	Killed	2	1	#expr	ConstExpression[407]	['-(2)', 'chg_numb']	592	"2"
@Pattern	Killed	2	1	#expr	ConstExpression[407]	['-(2)', 'chg_numb', 'dec_value']	592	"2"
@Pattern	Killed	2	1	#expr	ConstExpression[407]	['-(2)', 'chg_numb', 'dec_value', 'set_neg']	592	"2"
@Pattern	Killed	2	1	#expr	ConstExpression[407]	['-(2)', 'chg_numb', 'set_neg']	592	"2"
@Pattern	Killed	2	1	#expr	ConstExpression[407]	['-(2)', 'dec_value']	592	"2"
@Pattern	Killed	2	1	#expr	ConstExpression[407]	['-(2)', 'dec_value', 'set_neg']	592	"2"
@Pattern	Killed	2	1	#expr	ConstExpression[407]	['-(2)', 'set_neg']	592	"2"
@Pattern	Killed	11	1	#expr	ConstExpression[407]	['chg_numb']	592	"2"
@Pattern	Killed	8	1	#expr	ConstExpression[407]	['chg_numb', 'dec_value']	592	"2"
@Pattern	Killed	4	1	#expr	ConstExpression[407]	['chg_numb', 'dec_value', 'set_neg']	592	"2"
@Pattern	Killed	4	1	#expr	ConstExpression[407]	['chg_numb', 'set_neg']	592	"2"
@Pattern	Killed	8	1	#expr	ConstExpression[407]	['dec_value']	592	"2"
@Pattern	Killed	4	1	#expr	ConstExpression[407]	['dec_value', 'set_neg']	592	"2"
@Pattern	Killed	4	1	#expr	ConstExpression[407]	['set_neg']	592	"2"
@Pattern	Killed	17	6	#cons	ReturnAssignStatement[414]	[]	594	"return 0;"
@Pattern	Killed	17	6	#cons	ReturnAssignStatement[414]	['true']	594	"return 0;"
@Pattern	Killed	10	3	#expr	ConstExpression[412]	[]	594	"0"
@Pattern	Alive	0	3	#expr	ConstExpression[412]	['-(0)']	594	"0"
@Pattern	Killed	10	3	#stat	ReturnPoint[413]	[]	594	"return"
@Pattern	Alive	0	3	#stat	ReturnPoint[413]	['@(-(0))']	594	"return"
@Pattern	Killed	10	3	#stat	ReturnPoint[413]	['chg_numb']	594	"return"
@Pattern	Alive	0	3	#stat	ReturnPoint[413]	['@(-(0))', 'chg_numb']	594	"return"
@Pattern	Alive	0	3	#stat	ReturnPoint[413]	['chg_numb', 'set_zro']	594	"return"
@Pattern	Alive	0	3	#stat	ReturnPoint[413]	['set_zro']	594	"return"
@Pattern	Killed	7	3	#trap	ReturnAssignStatement[414]	[]	594	"return 0;"
@Pattern	Killed	7	3	#trap	ReturnAssignStatement[414]	['trapping']	594	"return 0;"
@Pattern	Alive	3	10	#expr	ConstExpression[471]	[]	606	"1"
@Pattern	Alive	0	3	#expr	ConstExpression[471]	['-(1)']	606	"1"
@Pattern	Alive	3	10	#expr	ConstExpression[471]	['chg_numb']	606	"1"
@Pattern	Alive	0	3	#expr	ConstExpression[471]	['-(1)', 'chg_numb']	606	"1"
@Pattern	Alive	3	6	#expr	ConstExpression[471]	['chg_numb', 'dec_value']	606	"1"
@Pattern	Alive	0	3	#expr	ConstExpression[471]	['-(1)', 'chg_numb', 'dec_value']	606	"1"
@Pattern	Alive	0	6	#expr	ConstExpression[471]	['chg_numb', 'dec_value', 'set_neg']	606	"1"
@Pattern	Alive	0	6	#expr	ConstExpression[471]	['chg_numb', 'set_neg']	606	"1"
@Pattern	Alive	3	6	#expr	ConstExpression[471]	['dec_value']	606	"1"
@Pattern	Alive	0	3	#expr	ConstExpression[471]	['-(1)', 'dec_value']	606	"1"
@Pattern	Alive	0	6	#expr	ConstExpression[471]	['dec_value', 'set_neg']	606	"1"
@Pattern	Alive	0	6	#expr	ConstExpression[471]	['set_neg']	606	"1"
@Pattern	Alive	10	12	#cons	ReturnAssignStatement[473]	[]	606	"return 1;"
@Pattern	Alive	10	12	#cons	ReturnAssignStatement[473]	['true']	606	"return 1;"
@Pattern	Killed	248	52	#cons	IfStatement[440]	[]	599	"for(k = 2; k <= n; k++)         {             if( (x % k) == 0 )             {                 return 0;             }         }"
@Pattern	Unknown	12	12	#cons	IfStatement[440]	['!((k) <= (n))']	599	"for(k = 2; k <= n; k++)         {             if( (x % k) == 0 )             {                 return 0;             }         }"
@Pattern	Alive	3	10	#stat	ReturnPoint[472]	[]	606	"return"
@Pattern	Alive	0	3	#stat	ReturnPoint[472]	['@(-(1))']	606	"return"
@Pattern	Alive	3	10	#stat	ReturnPoint[472]	['chg_numb']	606	"return"
@Pattern	Alive	0	3	#stat	ReturnPoint[472]	['@(-(1))', 'chg_numb']	606	"return"
@Pattern	Alive	0	6	#stat	ReturnPoint[472]	['chg_numb', 'set_neg']	606	"return"
@Pattern	Alive	0	6	#stat	ReturnPoint[472]	['set_neg']	606	"return"
@Pattern	Killed	7	2	#trap	ReturnAssignStatement[473]	[]	606	"return 1;"
@Pattern	Killed	7	2	#trap	ReturnAssignStatement[473]	['trapping']	606	"return 1;"
@Pattern	Killed	18	7	#stat	Identifier[419]	[]	598	"n"
@Pattern	Killed	2	1	#stat	Identifier[419]	['@(-(@(sqrt(x))))']	598	"n"
@Pattern	Killed	2	1	#stat	Identifier[419]	['@(-(@(sqrt(x))))', 'chg_numb']	598	"n"
@Pattern	Killed	18	7	#stat	Identifier[419]	['chg_numb']	598	"n"
@Pattern	Killed	21	7	#cons	BinAssignStatement[431]	[]	598	"n = (int) (sqrt(x))"
@Pattern	Killed	2	0	#cons	BinAssignStatement[431]	['(@(sqrt(x))) != (0)']	598	"n = (int) (sqrt(x))"
@Pattern	Killed	18	7	#expr	CastExpression[430]	[]	598	"(int) (sqrt(x))"
@Pattern	Killed	2	1	#expr	CastExpression[430]	['-(@(sqrt(x)))']	598	"(int) (sqrt(x))"
@Pattern	Killed	2	1	#expr	CastExpression[430]	['-(@(sqrt(x)))', 'chg_numb']	598	"(int) (sqrt(x))"
@Pattern	Killed	18	7	#expr	CastExpression[430]	['chg_numb']	598	"(int) (sqrt(x))"
@Pattern	Killed	6	4	#trap	WaitAssignStatement[427]	[]	598	"sqrt(x)"
@Pattern	Killed	6	4	#trap	WaitAssignStatement[427]	['trapping']	598	"sqrt(x)"
@Pattern	Killed	18	6	#cons	WaitAssignStatement[427]	[]	598	"sqrt(x)"
@Pattern	Killed	18	6	#cons	WaitAssignStatement[427]	['true']	598	"sqrt(x)"
@Pattern	Killed	42	4	#expr	RelationExpression[439]	[]	599	"k <= n"
@Pattern	Alive	0	2	#expr	RelationExpression[439]	['-((k) <= (n))']	599	"k <= n"
@Pattern	Killed	42	4	#expr	RelationExpression[439]	['not_bool']	599	"k <= n"
@Pattern	Alive	0	2	#expr	RelationExpression[439]	['-((k) <= (n))', 'not_bool']	599	"k <= n"
@Pattern	Killed	31	4	#trap	IfStatement[440]	[]	599	"for(k = 2; k <= n; k++)         {             if( (x % k) == 0 )             {                 return 0;             }         }"
@Pattern	Killed	31	4	#trap	IfStatement[440]	['trapping']	599	"for(k = 2; k <= n; k++)         {             if( (x % k) == 0 )             {                 return 0;             }         }"
@Pattern	Killed	5	4	#expr	Implicator[428]	[]	598	"sqrt(x)"
@Pattern	Killed	2	1	#expr	Implicator[428]	['-(sqrt(x))']	598	"sqrt(x)"
@Pattern	Killed	2	1	#expr	Implicator[428]	['-(sqrt(x))', 'chg_numb']	598	"sqrt(x)"
@Pattern	Killed	5	4	#expr	Implicator[428]	['chg_numb']	598	"sqrt(x)"
@Pattern	Killed	25	5	#cons	BinAssignStatement[435]	[]	599	"k = 2"
@Pattern	Killed	25	5	#cons	BinAssignStatement[435]	['true']	599	"k = 2"
@Pattern	Killed	15	3	#stat	Identifier[433]	[]	599	"k"
@Pattern	Killed	2	1	#stat	Identifier[433]	['@(-(2))']	599	"k"
@Pattern	Killed	2	1	#stat	Identifier[433]	['@(-(2))', 'chg_numb']	599	"k"
@Pattern	Killed	2	1	#stat	Identifier[433]	['@(-(2))', 'chg_numb', 'set_neg']	599	"k"
@Pattern	Killed	2	1	#stat	Identifier[433]	['@(-(2))', 'set_neg']	599	"k"
@Pattern	Killed	15	3	#stat	Identifier[433]	['chg_numb']	599	"k"
@Pattern	Killed	4	1	#stat	Identifier[433]	['chg_numb', 'set_neg']	599	"k"
@Pattern	Killed	4	1	#stat	Identifier[433]	['set_neg']	599	"k"
@Pattern	Killed	15	3	#expr	ConstExpression[434]	[]	599	"2"
@Pattern	Killed	2	1	#expr	ConstExpression[434]	['-(2)']	599	"2"
@Pattern	Killed	2	1	#expr	ConstExpression[434]	['-(2)', 'chg_numb']	599	"2"
@Pattern	Killed	2	1	#expr	ConstExpression[434]	['-(2)', 'chg_numb', 'dec_value']	599	"2"
@Pattern	Killed	2	1	#expr	ConstExpression[434]	['-(2)', 'chg_numb', 'dec_value', 'set_neg']	599	"2"
@Pattern	Killed	2	1	#expr	ConstExpression[434]	['-(2)', 'chg_numb', 'set_neg']	599	"2"
@Pattern	Killed	2	1	#expr	ConstExpression[434]	['-(2)', 'dec_value']	599	"2"
@Pattern	Killed	2	1	#expr	ConstExpression[434]	['-(2)', 'dec_value', 'set_neg']	599	"2"
@Pattern	Killed	2	1	#expr	ConstExpression[434]	['-(2)', 'set_neg']	599	"2"
@Pattern	Killed	15	3	#expr	ConstExpression[434]	['chg_numb']	599	"2"
@Pattern	Killed	8	1	#expr	ConstExpression[434]	['chg_numb', 'dec_value']	599	"2"
@Pattern	Killed	4	1	#expr	ConstExpression[434]	['chg_numb', 'dec_value', 'set_neg']	599	"2"
@Pattern	Killed	4	1	#expr	ConstExpression[434]	['chg_numb', 'set_neg']	599	"2"
@Pattern	Killed	8	1	#expr	ConstExpression[434]	['dec_value']	599	"2"
@Pattern	Killed	4	1	#expr	ConstExpression[434]	['dec_value', 'set_neg']	599	"2"
@Pattern	Killed	4	1	#expr	ConstExpression[434]	['set_neg']	599	"2"
@Pattern	Killed	9	2	#trap	BinAssignStatement[435]	[]	599	"k = 2"
@Pattern	Killed	9	2	#trap	BinAssignStatement[435]	['trapping']	599	"k = 2"
@Pattern	Killed	11	1	#expr	Identifier[437]	[]	599	"k"
@Pattern	Killed	2	1	#expr	Identifier[437]	['-(k)']	599	"k"
@Pattern	Killed	2	1	#expr	Identifier[437]	['-(k)', 'chg_numb']	599	"k"
@Pattern	Killed	11	1	#expr	Identifier[437]	['chg_numb']	599	"k"
@Pattern	Killed	11	1	#expr	Identifier[438]	[]	599	"n"
@Pattern	Killed	2	1	#expr	Identifier[438]	['-(n)']	599	"n"
@Pattern	Killed	2	1	#expr	Identifier[438]	['-(n)', 'chg_numb']	599	"n"
@Pattern	Killed	11	1	#expr	Identifier[438]	['chg_numb']	599	"n"
@Pattern	Killed	162	32	#cons	IfStatement[448]	[]	601	"if( (x % k) == 0 )             {                 return 0;             }"
@Pattern	Killed	140	24	#cons	IfStatement[448]	['true']	601	"if( (x % k) == 0 )             {                 return 0;             }"
@Pattern	Killed	68	15	#expr	RelationExpression[447]	[]	601	"(x % k) == 0"
@Pattern	Alive	0	2	#expr	RelationExpression[447]	['-(((x) % (k)) == (0))']	601	"(x % k) == 0"
@Pattern	Killed	68	12	#expr	RelationExpression[447]	['not_bool']	601	"(x % k) == 0"
@Pattern	Alive	0	2	#expr	RelationExpression[447]	['-(((x) % (k)) == (0))', 'not_bool']	601	"(x % k) == 0"
@Pattern	Killed	80	12	#trap	IfStatement[448]	[]	601	"if( (x % k) == 0 )             {                 return 0;             }"
@Pattern	Killed	80	12	#trap	IfStatement[448]	['trapping']	601	"if( (x % k) == 0 )             {                 return 0;             }"
@Pattern	Killed	43	9	#expr	ArithExpression[445]	[]	601	"x % k"
@Pattern	Alive	0	3	#expr	ArithExpression[445]	['-((x) % (k))']	601	"x % k"
@Pattern	Killed	43	9	#expr	ArithExpression[445]	['chg_numb']	601	"x % k"
@Pattern	Alive	0	3	#expr	ArithExpression[445]	['-((x) % (k))', 'chg_numb']	601	"x % k"
@Pattern	Killed	9	3	#expr	ConstExpression[446]	[]	601	"0"
@Pattern	Alive	0	3	#expr	ConstExpression[446]	['-(0)']	601	"0"
@Pattern	Killed	22	4	#cons	CallStatement[423]	[]	598	"sqrt(x)"
@Pattern	Killed	22	4	#cons	CallStatement[423]	['true']	598	"sqrt(x)"
@Pattern	Killed	12	2	#stat	Implicator[426]	[]	598	"sqrt(x)"
@Pattern	Killed	12	2	#stat	Implicator[426]	['@(sqrt(x))']	598	"sqrt(x)"
@Pattern	Killed	12	2	#stat	Implicator[426]	['@(sqrt(x))', 'chg_numb']	598	"sqrt(x)"
@Pattern	Killed	12	2	#stat	Implicator[426]	['chg_numb']	598	"sqrt(x)"
@Pattern	Killed	12	2	#expr	WaitExpression[425]	[]	598	"sqrt(x)"
@Pattern	Killed	12	2	#expr	WaitExpression[425]	['sqrt(x)']	598	"sqrt(x)"
@Pattern	Killed	10	2	#expr	Identifier[422]	[]	598	"x"
@Pattern	Killed	2	1	#expr	Identifier[422]	['-(x)']	598	"x"
@Pattern	Killed	2	1	#expr	Identifier[422]	['-(x)', 'chg_numb']	598	"x"
@Pattern	Killed	10	2	#expr	Identifier[422]	['chg_numb']	598	"x"
@Pattern	Killed	7	2	#trap	CallStatement[423]	[]	598	"sqrt(x)"
@Pattern	Killed	7	2	#trap	CallStatement[423]	['trapping']	598	"sqrt(x)"
@Pattern	Killed	9	3	#expr	Identifier[443]	[]	601	"x"
@Pattern	Alive	0	3	#expr	Identifier[443]	['-(x)']	601	"x"
@Pattern	Killed	9	3	#expr	Identifier[443]	['chg_numb']	601	"x"
@Pattern	Alive	0	3	#expr	Identifier[443]	['-(x)', 'chg_numb']	601	"x"
@Pattern	Killed	9	3	#expr	Identifier[444]	[]	601	"k"
@Pattern	Alive	0	3	#expr	Identifier[444]	['-(k)']	601	"k"
@Pattern	Killed	9	3	#expr	Identifier[444]	['chg_numb']	601	"k"
@Pattern	Alive	0	3	#expr	Identifier[444]	['-(k)', 'chg_numb']	601	"k"
@Pattern	Killed	10	3	#expr	ConstExpression[451]	[]	603	"0"
@Pattern	Alive	0	3	#expr	ConstExpression[451]	['-(0)']	603	"0"
@Pattern	Killed	17	6	#cons	ReturnAssignStatement[453]	[]	603	"return 0;"
@Pattern	Alive	0	2	#cons	ReturnAssignStatement[453]	['(0) != (0)']	603	"return 0;"
@Pattern	Killed	10	3	#stat	ReturnPoint[452]	[]	603	"return"
@Pattern	Alive	0	3	#stat	ReturnPoint[452]	['@(-(0))']	603	"return"
@Pattern	Killed	10	3	#stat	ReturnPoint[452]	['chg_numb']	603	"return"
@Pattern	Alive	0	3	#stat	ReturnPoint[452]	['@(-(0))', 'chg_numb']	603	"return"
@Pattern	Alive	0	3	#stat	ReturnPoint[452]	['chg_numb', 'set_zro']	603	"return"
@Pattern	Alive	0	3	#stat	ReturnPoint[452]	['set_zro']	603	"return"
@Pattern	Killed	7	3	#trap	ReturnAssignStatement[453]	[]	603	"return 0;"
@Pattern	Killed	7	3	#trap	ReturnAssignStatement[453]	['trapping']	603	"return 0;"
@Pattern	Killed	2	0	#trap	BinAssignStatement[431]	[]	598	"n = (int) (sqrt(x))"
@Pattern	Unknown	2	2	#trap	IncreAssignStatement[466]	[]	599	"k++"
@Pattern	Unknown	2	2	#trap	IncreAssignStatement[466]	['trapping']	599	"k++"
@Pattern	Killed	5	2	#cons	IncreAssignStatement[466]	[]	599	"k++"
@Pattern	Killed	5	2	#cons	IncreAssignStatement[466]	['true']	599	"k++"
@Pattern	Killed	1	0	#cons	InitAssignStatement[405]	[]	591	"n"
@Pattern	Killed	1	0	#flow	InitAssignStatement[405]	[]	591	"n"
@Pattern	Killed	1	0	#flow	IfStatement[409]	[]	592	"if(x < 2)     {         return 0;     }     else     {         n = (int) (sqrt(x));         for(k = 2; k <= n; k++)         {             if( (x % k) == 0 )             {                 return 0;             }         }         return 1;     }"
@Pattern	Killed	2	0	#flow	BinAssignStatement[431]	[]	598	"n = (int) (sqrt(x))"
@Pattern	Killed	2	0	#flow	IfStatement[440]	[]	599	"for(k = 2; k <= n; k++)         {             if( (x % k) == 0 )             {                 return 0;             }         }"
@Pattern	Killed	2	0	#refr	Identifier[406]	[]	592	"x"
@Pattern	Killed	2	0	#refr	Identifier[437]	[]	599	"k"
@Pattern	Killed	2	0	#refr	Identifier[438]	[]	599	"n"
@Pattern	Killed	2	0	#refr	Identifier[422]	[]	598	"x"
@Pattern	Killed	2	0	#refr	Identifier[443]	[]	601	"x"
@Pattern	Killed	2	0	#refr	Identifier[444]	[]	601	"k"
@Pattern	Killed	3	0	#expr	ArithExpression[464]	[]
@Pattern	Killed	3	0	#stat	Identifier[465]	[]	599	"k"
@Pattern	Killed	4	0	#stat	Identifier[406]	[]	592	"x"
@Pattern	Killed	4	0	#stat	Identifier[437]	[]	599	"k"
@Pattern	Killed	4	0	#stat	Identifier[438]	[]	599	"n"
@Pattern	Killed	4	0	#stat	Identifier[422]	[]	598	"x"
@Pattern	Killed	4	0	#stat	Identifier[443]	[]	601	"x"
@Pattern	Killed	4	0	#stat	Identifier[444]	[]	601	"k"
@Pattern	Killed	1	0	#trap	InitAssignStatement[402]	[]	591	"k"
@Pattern	Killed	1	0	#cons	InitAssignStatement[402]	[]	591	"k"
@Pattern	Killed	3	2	#cons	WaitAssignStatement[567]	[]	622	"fprintf(stdout, "\n")"
@Pattern	Killed	3	2	#cons	WaitAssignStatement[567]	['true']	622	"fprintf(stdout, "\n")"
@Pattern	Killed	3	2	#trap	WaitAssignStatement[567]	[]	622	"fprintf(stdout, "\n")"
@Pattern	Killed	3	2	#trap	WaitAssignStatement[567]	['trapping']	622	"fprintf(stdout, "\n")"
@Pattern	Alive	0	11	#expr	ConstExpression[569]	[]	623	"0"
@Pattern	Alive	4	14	#cons	ReturnAssignStatement[571]	[]	623	"return 0;"
@Pattern	Alive	0	2	#cons	ReturnAssignStatement[571]	['(0) != (0)']	623	"return 0;"
@Pattern	Alive	0	11	#stat	ReturnPoint[570]	[]	623	"return"
@Pattern	Killed	4	3	#trap	ReturnAssignStatement[571]	[]	623	"return 0;"
@Pattern	Killed	4	3	#trap	ReturnAssignStatement[571]	['trapping']	623	"return 0;"
@Pattern	Killed	38	8	#expr	RelationExpression[502]	[]	614	"k < argc"
@Pattern	Alive	0	2	#expr	RelationExpression[502]	['-((k) < (argc))']	614	"k < argc"
@Pattern	Killed	38	8	#expr	RelationExpression[502]	['not_bool']	614	"k < argc"
@Pattern	Alive	0	2	#expr	RelationExpression[502]	['-((k) < (argc))', 'not_bool']	614	"k < argc"
@Pattern	Killed	29	6	#trap	IfStatement[503]	[]	614	"for(k = 1; k < argc; k++)  {   number = atoi(argv[k]);   if(is_prime(number))   {    fprintf(stdout, "%d; ", number);   }  }"
@Pattern	Killed	29	6	#trap	IfStatement[503]	['trapping']	614	"for(k = 1; k < argc; k++)  {   number = atoi(argv[k]);   if(is_prime(number))   {    fprintf(stdout, "%d; ", number);   }  }"
@Pattern	Alive	8	9	#expr	ConstExpression[497]	[]	614	"1"
@Pattern	Killed	2	1	#expr	ConstExpression[497]	['-(1)']	614	"1"
@Pattern	Killed	2	1	#expr	ConstExpression[497]	['-(1)', 'chg_numb']	614	"1"
@Pattern	Killed	2	1	#expr	ConstExpression[497]	['-(1)', 'chg_numb', 'dec_value']	614	"1"
@Pattern	Killed	2	1	#expr	ConstExpression[497]	['-(1)', 'chg_numb', 'dec_value', 'set_neg']	614	"1"
@Pattern	Killed	2	1	#expr	ConstExpression[497]	['-(1)', 'chg_numb', 'set_neg']	614	"1"
@Pattern	Killed	2	1	#expr	ConstExpression[497]	['-(1)', 'dec_value']	614	"1"
@Pattern	Killed	2	1	#expr	ConstExpression[497]	['-(1)', 'dec_value', 'set_neg']	614	"1"
@Pattern	Killed	2	1	#expr	ConstExpression[497]	['-(1)', 'set_neg']	614	"1"
@Pattern	Alive	8	9	#expr	ConstExpression[497]	['chg_numb']	614	"1"
@Pattern	Killed	5	4	#expr	ConstExpression[497]	['chg_numb', 'dec_value']	614	"1"
@Pattern	Killed	5	1	#expr	ConstExpression[497]	['chg_numb', 'dec_value', 'set_neg']	614	"1"
@Pattern	Killed	5	1	#expr	ConstExpression[497]	['chg_numb', 'set_neg']	614	"1"
@Pattern	Killed	5	4	#expr	ConstExpression[497]	['dec_value']	614	"1"
@Pattern	Killed	5	1	#expr	ConstExpression[497]	['dec_value', 'set_neg']	614	"1"
@Pattern	Killed	5	1	#expr	ConstExpression[497]	['set_neg']	614	"1"
@Pattern	Killed	16	12	#cons	BinAssignStatement[498]	[]	614	"k = 1"
@Pattern	Killed	16	12	#cons	BinAssignStatement[498]	['true']	614	"k = 1"
@Pattern	Alive	8	9	#stat	Identifier[496]	[]	614	"k"
@Pattern	Killed	2	1	#stat	Identifier[496]	['@(-(1))']	614	"k"
@Pattern	Killed	2	1	#stat	Identifier[496]	['@(-(1))', 'chg_numb']	614	"k"
@Pattern	Killed	2	1	#stat	Identifier[496]	['@(-(1))', 'chg_numb', 'set_neg']	614	"k"
@Pattern	Killed	2	1	#stat	Identifier[496]	['@(-(1))', 'set_neg']	614	"k"
@Pattern	Alive	8	9	#stat	Identifier[496]	['chg_numb']	614	"k"
@Pattern	Killed	5	1	#stat	Identifier[496]	['chg_numb', 'set_neg']	614	"k"
@Pattern	Killed	5	1	#stat	Identifier[496]	['set_neg']	614	"k"
@Pattern	Killed	7	3	#trap	BinAssignStatement[498]	[]	614	"k = 1"
@Pattern	Killed	7	3	#trap	BinAssignStatement[498]	['trapping']	614	"k = 1"
@Pattern	Killed	11	1	#expr	Identifier[500]	[]	614	"k"
@Pattern	Killed	2	1	#expr	Identifier[500]	['-(k)']	614	"k"
@Pattern	Killed	2	1	#expr	Identifier[500]	['-(k)', 'chg_numb']	614	"k"
@Pattern	Killed	11	1	#expr	Identifier[500]	['chg_numb']	614	"k"
@Pattern	Killed	11	1	#expr	Identifier[501]	[]	614	"argc"
@Pattern	Killed	2	1	#expr	Identifier[501]	['-(argc)']	614	"argc"
@Pattern	Killed	2	1	#expr	Identifier[501]	['-(argc)', 'chg_numb']	614	"argc"
@Pattern	Killed	11	1	#expr	Identifier[501]	['chg_numb']	614	"argc"
@Pattern	Killed	51	11	#cons	WaitAssignStatement[528]	[]	617	"is_prime(number)"
@Pattern	Killed	51	11	#cons	WaitAssignStatement[528]	['true']	617	"is_prime(number)"
@Pattern	Killed	28	9	#cons	IfStatement[530]	[]	617	"if(is_prime(number))   {    fprintf(stdout, "%d; ", number);   }"
@Pattern	Killed	5	2	#cons	IfStatement[530]	['true']	617	"if(is_prime(number))   {    fprintf(stdout, "%d; ", number);   }"
@Pattern	Unknown	2	2	#expr	Implicator[529]	[]	617	"is_prime(number)"
@Pattern	Alive	0	2	#expr	Implicator[529]	['-(is_prime(number))']	617	"is_prime(number)"
@Pattern	Unknown	2	2	#expr	Implicator[529]	['not_bool']	617	"is_prime(number)"
@Pattern	Alive	0	2	#expr	Implicator[529]	['-(is_prime(number))', 'not_bool']	617	"is_prime(number)"
@Pattern	Killed	4	0	#trap	WaitAssignStatement[528]	[]	617	"is_prime(number)"
@Pattern	Killed	16	0	#expr	Implicator[518]	[]	616	"atoi(argv[k])"
@Pattern	Killed	17	0	#cons	BinAssignStatement[519]	[]	616	"number = atoi(argv[k])"
@Pattern	Killed	16	0	#stat	Identifier[506]	[]	616	"number"
@Pattern	Killed	5	0	#trap	WaitAssignStatement[517]	[]	616	"atoi(argv[k])"
@Pattern	Killed	18	1	#cons	WaitAssignStatement[517]	[]	616	"atoi(argv[k])"
@Pattern	Killed	18	1	#cons	WaitAssignStatement[517]	['true']	616	"atoi(argv[k])"
@Pattern	Killed	14	0	#stat	Implicator[527]	[]	617	"is_prime(number)"
@Pattern	Killed	14	0	#expr	WaitExpression[526]	[]	617	"is_prime(number)"
@Pattern	Killed	12	0	#expr	Identifier[523]	[]	617	"number"
@Pattern	Killed	7	0	#trap	CallStatement[524]	[]	617	"is_prime(number)"
@Pattern	Killed	3	2	#trap	WaitAssignStatement[542]	[]	619	"fprintf(stdout, "%d; ", number)"
@Pattern	Killed	3	2	#trap	WaitAssignStatement[542]	['trapping']	619	"fprintf(stdout, "%d; ", number)"
@Pattern	Killed	16	3	#cons	WaitAssignStatement[542]	[]	619	"fprintf(stdout, "%d; ", number)"
@Pattern	Killed	16	3	#cons	WaitAssignStatement[542]	['true']	619	"fprintf(stdout, "%d; ", number)"
@Pattern	Killed	13	1	#stat	Implicator[516]	[]	616	"atoi(argv[k])"
@Pattern	Killed	13	1	#stat	Implicator[516]	['@(atoi(*((argv) + (k))))']	616	"atoi(argv[k])"
@Pattern	Killed	13	1	#stat	Implicator[516]	['@(atoi(*((argv) + (k))))', 'chg_numb']	616	"atoi(argv[k])"
@Pattern	Killed	13	1	#stat	Implicator[516]	['chg_numb']	616	"atoi(argv[k])"
@Pattern	Killed	31	10	#cons	CallStatement[513]	[]	616	"atoi(argv[k])"
@Pattern	Killed	31	10	#cons	CallStatement[513]	['true']	616	"atoi(argv[k])"
@Pattern	Killed	13	1	#expr	ArithExpression[511]	[]
@Pattern	Killed	2	1	#expr	ArithExpression[511]	['(argv) + (-(k))']
@Pattern	Killed	2	1	#expr	ArithExpression[511]	['(argv) + (-(k))', 'chg_addr']
@Pattern	Killed	13	1	#expr	ArithExpression[511]	['chg_addr']
@Pattern	Killed	13	1	#expr	WaitExpression[515]	[]	616	"atoi(argv[k])"
@Pattern	Killed	13	1	#expr	WaitExpression[515]	['atoi(*((argv) + (k)))']	616	"atoi(argv[k])"
@Pattern	Killed	11	1	#expr	Identifier[510]	[]	616	"k"
@Pattern	Killed	2	1	#expr	Identifier[510]	['-(k)']	616	"k"
@Pattern	Killed	2	1	#expr	Identifier[510]	['-(k)', 'chg_numb']	616	"k"
@Pattern	Killed	11	1	#expr	Identifier[510]	['chg_numb']	616	"k"
@Pattern	Killed	13	1	#refr	DeferExpression[512]	[]	616	"argv[k]"
@Pattern	Killed	2	1	#refr	DeferExpression[512]	['*((argv) + (-(k)))']	616	"argv[k]"
@Pattern	Killed	2	1	#refr	DeferExpression[512]	['*((argv) + (-(k)))', 'chg_addr']	616	"argv[k]"
@Pattern	Killed	13	1	#refr	DeferExpression[512]	['chg_addr']	616	"argv[k]"
@Pattern	Killed	15	9	#trap	CallStatement[513]	[]	616	"atoi(argv[k])"
@Pattern	Killed	15	9	#trap	CallStatement[513]	['trapping']	616	"atoi(argv[k])"
@Pattern	Killed	13	1	#expr	WaitExpression[540]	[]	619	"fprintf(stdout, "%d; ", number)"
@Pattern	Killed	13	1	#expr	WaitExpression[540]	['fprintf(stdout, @Literal, number)']	619	"fprintf(stdout, "%d; ", number)"
@Pattern	Killed	21	5	#cons	CallStatement[538]	[]	619	"fprintf(stdout, "%d; ", number)"
@Pattern	Killed	2	0	#cons	CallStatement[538]	['(number) != (0)']	619	"fprintf(stdout, "%d; ", number)"
@Pattern	Killed	11	1	#expr	Identifier[537]	[]	619	"number"
@Pattern	Killed	2	1	#expr	Identifier[537]	['-(number)']	619	"number"
@Pattern	Killed	2	1	#expr	Identifier[537]	['-(number)', 'chg_numb']	619	"number"
@Pattern	Killed	11	1	#expr	Identifier[537]	['chg_numb']	619	"number"
@Pattern	Killed	13	1	#stat	Implicator[541]	[]	619	"fprintf(stdout, "%d; ", number)"
@Pattern	Killed	13	1	#stat	Implicator[541]	['@(fprintf(stdout, @Literal, number))']	619	"fprintf(stdout, "%d; ", number)"
@Pattern	Killed	13	1	#stat	Implicator[541]	['@(fprintf(stdout, @Literal, number))', 'chg_numb']	619	"fprintf(stdout, "%d; ", number)"
@Pattern	Killed	13	1	#stat	Implicator[541]	['chg_numb']	619	"fprintf(stdout, "%d; ", number)"
@Pattern	Killed	7	2	#trap	CallStatement[538]	[]	619	"fprintf(stdout, "%d; ", number)"
@Pattern	Killed	7	2	#trap	CallStatement[538]	['trapping']	619	"fprintf(stdout, "%d; ", number)"
@Pattern	Unknown	2	2	#trap	IncreAssignStatement[554]	[]	614	"k++"
@Pattern	Unknown	2	2	#trap	IncreAssignStatement[554]	['trapping']	614	"k++"
@Pattern	Killed	5	2	#cons	IncreAssignStatement[554]	[]	614	"k++"
@Pattern	Killed	5	2	#cons	IncreAssignStatement[554]	['true']	614	"k++"
@Pattern	Killed	2	0	#trap	BinAssignStatement[519]	[]	616	"number = atoi(argv[k])"
@Pattern	Unknown	1	1	#cons	InitAssignStatement[495]	[]	613	"number"
@Pattern	Unknown	1	1	#cons	InitAssignStatement[495]	['true']	613	"number"
@Pattern	Unknown	1	1	#flow	InitAssignStatement[495]	[]	613	"number"
@Pattern	Killed	1	0	#flow	InitAssignStatement[495]	['main[22]']	613	"number"
@Pattern	Unknown	1	1	#flow	InitAssignStatement[495]	['chg_flow']	613	"number"
@Pattern	Killed	1	0	#flow	InitAssignStatement[495]	['chg_flow', 'main[22]']	613	"number"
@Pattern	Killed	1	0	#cons	IfEndStatement[558]	[]	614	"for(k = 1; k < argc; k++)  {   number = atoi(argv[k]);   if(is_prime(number))   {    fprintf(stdout, "%d; ", number);   }  }"
@Pattern	Killed	2	0	#cons	CallStatement[563]	[]	622	"fprintf(stdout, "\n")"
@Pattern	Killed	1	0	#flow	IfEndStatement[558]	[]	614	"for(k = 1; k < argc; k++)  {   number = atoi(argv[k]);   if(is_prime(number))   {    fprintf(stdout, "%d; ", number);   }  }"
@Pattern	Killed	2	0	#flow	IfStatement[503]	[]	614	"for(k = 1; k < argc; k++)  {   number = atoi(argv[k]);   if(is_prime(number))   {    fprintf(stdout, "%d; ", number);   }  }"
@Pattern	Killed	1	0	#flow	WaitAssignStatement[528]	[]	617	"is_prime(number)"
@Pattern	Killed	1	0	#flow	IfStatement[530]	[]	617	"if(is_prime(number))   {    fprintf(stdout, "%d; ", number);   }"
@Pattern	Killed	2	0	#refr	Identifier[500]	[]	614	"k"
@Pattern	Killed	2	0	#refr	Identifier[501]	[]	614	"argc"
@Pattern	Killed	2	0	#refr	Identifier[523]	[]	617	"number"
@Pattern	Killed	2	0	#refr	Identifier[510]	[]	616	"k"
@Pattern	Killed	2	0	#refr	Identifier[537]	[]	619	"number"
@Pattern	Killed	3	0	#stat	Identifier[553]	[]	614	"k"
@Pattern	Killed	3	0	#expr	ArithExpression[552]	[]
@Pattern	Killed	4	0	#stat	Identifier[500]	[]	614	"k"
@Pattern	Killed	4	0	#stat	Identifier[501]	[]	614	"argc"
@Pattern	Killed	4	0	#stat	Identifier[523]	[]	617	"number"
@Pattern	Killed	4	0	#stat	Identifier[510]	[]	616	"k"
@Pattern	Unknown	2	2	#stat	Identifier[537]	[]	619	"number"
@Pattern	Unknown	1	1	#stat	Identifier[537]	['(number) + (1)']	619	"number"
@Pattern	Unknown	1	1	#stat	Identifier[537]	['(number) + (1)', 'chg_numb']	619	"number"
@Pattern	Unknown	1	1	#stat	Identifier[537]	['(number) + (1)', 'chg_numb', 'inc_value']	619	"number"
@Pattern	Unknown	1	1	#stat	Identifier[537]	['(number) + (1)', 'inc_value']	619	"number"
@Pattern	Unknown	2	2	#stat	Identifier[537]	['chg_numb']	619	"number"
@Pattern	Unknown	1	1	#stat	Identifier[537]	['chg_numb', 'inc_value']	619	"number"
@Pattern	Unknown	1	1	#stat	Identifier[537]	['inc_value']	619	"number"
@Pattern	Killed	1	0	#trap	InitAssignStatement[492]	[]	613	"k"
@Pattern	Killed	1	0	#cons	InitAssignStatement[492]	[]	613	"k"
@Pattern	Killed	1	0	#trap	CallStatement[563]	[]	622	"fprintf(stdout, "\n")"
@Pattern	Killed	1	0	#trap	IfStatement[530]	[]	617	"if(is_prime(number))   {    fprintf(stdout, "%d; ", number);   }"
