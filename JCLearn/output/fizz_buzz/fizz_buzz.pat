	Label	Killed	Alive	Type	Location	Words	Line	Code
@Pattern	Killed	978	201	#cons	CallStatement[491]	[]	555	"parse_input(argc, argv)"
@Pattern	Killed	978	201	#cons	CallStatement[491]	['true']	555	"parse_input(argc, argv)"
@Pattern	Killed	31	23	#stat	Identifier[259]	[]	515	"length"
@Pattern	Killed	2	1	#stat	Identifier[259]	['@(-((argc) - (1)))']	515	"length"
@Pattern	Killed	2	1	#stat	Identifier[259]	['@(-((argc) - (1)))', 'chg_numb']	515	"length"
@Pattern	Killed	31	23	#stat	Identifier[259]	['chg_numb']	515	"length"
@Pattern	Killed	63	28	#cons	BinAssignStatement[263]	[]	515	"length = argc - 1"
@Pattern	Killed	63	28	#cons	BinAssignStatement[263]	['true']	515	"length = argc - 1"
@Pattern	Killed	31	23	#expr	ArithExpression[262]	[]	515	"argc - 1"
@Pattern	Killed	2	1	#expr	ArithExpression[262]	['-((argc) - (1))']	515	"argc - 1"
@Pattern	Killed	2	1	#expr	ArithExpression[262]	['-((argc) - (1))', 'chg_numb']	515	"argc - 1"
@Pattern	Killed	31	23	#expr	ArithExpression[262]	['chg_numb']	515	"argc - 1"
@Pattern	Killed	30	6	#trap	BinAssignStatement[263]	[]	515	"length = argc - 1"
@Pattern	Killed	30	6	#trap	BinAssignStatement[263]	['trapping']	515	"length = argc - 1"
@Pattern	Killed	208	30	#cons	IfStatement[288]	[]	517	"for(k = 1; k < argc; k++)  {   list[k - 1] = atoi(argv[k]);  }"
@Pattern	Killed	72	13	#cons	IfStatement[288]	['true']	517	"for(k = 1; k < argc; k++)  {   list[k - 1] = atoi(argv[k]);  }"
@Pattern	Killed	38	8	#expr	RelationExpression[287]	[]	517	"k < argc"
@Pattern	Alive	0	2	#expr	RelationExpression[287]	['-((k) < (argc))']	517	"k < argc"
@Pattern	Killed	38	8	#expr	RelationExpression[287]	['not_bool']	517	"k < argc"
@Pattern	Alive	0	2	#expr	RelationExpression[287]	['-((k) < (argc))', 'not_bool']	517	"k < argc"
@Pattern	Killed	29	6	#trap	IfStatement[288]	[]	517	"for(k = 1; k < argc; k++)  {   list[k - 1] = atoi(argv[k]);  }"
@Pattern	Killed	29	6	#trap	IfStatement[288]	['trapping']	517	"for(k = 1; k < argc; k++)  {   list[k - 1] = atoi(argv[k]);  }"
@Pattern	Killed	8	4	#expr	Identifier[260]	[]	515	"argc"
@Pattern	Killed	2	1	#expr	Identifier[260]	['-(argc)']	515	"argc"
@Pattern	Killed	2	1	#expr	Identifier[260]	['-(argc)', 'chg_numb']	515	"argc"
@Pattern	Killed	8	4	#expr	Identifier[260]	['chg_numb']	515	"argc"
@Pattern	Alive	3	7	#expr	ConstExpression[261]	[]	515	"1"
@Pattern	Alive	0	3	#expr	ConstExpression[261]	['-(1)']	515	"1"
@Pattern	Alive	3	7	#expr	ConstExpression[261]	['chg_numb']	515	"1"
@Pattern	Alive	0	3	#expr	ConstExpression[261]	['-(1)', 'chg_numb']	515	"1"
@Pattern	Alive	0	7	#expr	ConstExpression[261]	['chg_numb', 'dec_value']	515	"1"
@Pattern	Alive	0	6	#expr	ConstExpression[261]	['chg_numb', 'set_neg']	515	"1"
@Pattern	Alive	0	7	#expr	ConstExpression[261]	['dec_value']	515	"1"
@Pattern	Alive	0	6	#expr	ConstExpression[261]	['set_neg']	515	"1"
@Pattern	Killed	12	4	#expr	ConstExpression[282]	[]	517	"1"
@Pattern	Killed	2	1	#expr	ConstExpression[282]	['-(1)']	517	"1"
@Pattern	Killed	2	1	#expr	ConstExpression[282]	['-(1)', 'chg_numb']	517	"1"
@Pattern	Killed	2	1	#expr	ConstExpression[282]	['-(1)', 'chg_numb', 'dec_value']	517	"1"
@Pattern	Killed	2	1	#expr	ConstExpression[282]	['-(1)', 'chg_numb', 'dec_value', 'set_neg']	517	"1"
@Pattern	Killed	2	1	#expr	ConstExpression[282]	['-(1)', 'chg_numb', 'set_neg']	517	"1"
@Pattern	Killed	2	1	#expr	ConstExpression[282]	['-(1)', 'dec_value']	517	"1"
@Pattern	Killed	2	1	#expr	ConstExpression[282]	['-(1)', 'dec_value', 'set_neg']	517	"1"
@Pattern	Killed	2	1	#expr	ConstExpression[282]	['-(1)', 'set_neg']	517	"1"
@Pattern	Killed	12	4	#expr	ConstExpression[282]	['chg_numb']	517	"1"
@Pattern	Killed	5	3	#expr	ConstExpression[282]	['chg_numb', 'dec_value']	517	"1"
@Pattern	Killed	5	1	#expr	ConstExpression[282]	['chg_numb', 'dec_value', 'set_neg']	517	"1"
@Pattern	Killed	5	1	#expr	ConstExpression[282]	['chg_numb', 'set_neg']	517	"1"
@Pattern	Killed	5	3	#expr	ConstExpression[282]	['dec_value']	517	"1"
@Pattern	Killed	5	1	#expr	ConstExpression[282]	['dec_value', 'set_neg']	517	"1"
@Pattern	Killed	5	1	#expr	ConstExpression[282]	['set_neg']	517	"1"
@Pattern	Killed	12	4	#stat	Identifier[281]	[]	517	"k"
@Pattern	Killed	2	1	#stat	Identifier[281]	['@(-(1))']	517	"k"
@Pattern	Killed	2	1	#stat	Identifier[281]	['@(-(1))', 'chg_numb']	517	"k"
@Pattern	Killed	2	1	#stat	Identifier[281]	['@(-(1))', 'chg_numb', 'set_neg']	517	"k"
@Pattern	Killed	2	1	#stat	Identifier[281]	['@(-(1))', 'set_neg']	517	"k"
@Pattern	Killed	12	4	#stat	Identifier[281]	['chg_numb']	517	"k"
@Pattern	Killed	5	1	#stat	Identifier[281]	['chg_numb', 'set_neg']	517	"k"
@Pattern	Killed	5	1	#stat	Identifier[281]	['set_neg']	517	"k"
@Pattern	Killed	20	6	#cons	BinAssignStatement[283]	[]	517	"k = 1"
@Pattern	Killed	20	6	#cons	BinAssignStatement[283]	['true']	517	"k = 1"
@Pattern	Killed	6	3	#trap	BinAssignStatement[283]	[]	517	"k = 1"
@Pattern	Killed	6	3	#trap	BinAssignStatement[283]	['trapping']	517	"k = 1"
@Pattern	Killed	11	1	#expr	Identifier[285]	[]	517	"k"
@Pattern	Killed	2	1	#expr	Identifier[285]	['-(k)']	517	"k"
@Pattern	Killed	2	1	#expr	Identifier[285]	['-(k)', 'chg_numb']	517	"k"
@Pattern	Killed	11	1	#expr	Identifier[285]	['chg_numb']	517	"k"
@Pattern	Killed	11	1	#expr	Identifier[286]	[]	517	"argc"
@Pattern	Killed	2	1	#expr	Identifier[286]	['-(argc)']	517	"argc"
@Pattern	Killed	2	1	#expr	Identifier[286]	['-(argc)', 'chg_numb']	517	"argc"
@Pattern	Killed	11	1	#expr	Identifier[286]	['chg_numb']	517	"argc"
@Pattern	Killed	31	17	#expr	ArithExpression[270]	[]	516	"sizeof(int) * length"
@Pattern	Killed	2	1	#expr	ArithExpression[270]	['-((4) * (length))']	516	"sizeof(int) * length"
@Pattern	Killed	2	1	#expr	ArithExpression[270]	['-((4) * (length))', 'chg_numb']	516	"sizeof(int) * length"
@Pattern	Killed	31	17	#expr	ArithExpression[270]	['chg_numb']	516	"sizeof(int) * length"
@Pattern	Killed	60	23	#cons	CallStatement[271]	[]	516	"malloc(sizeof(int) * length)"
@Pattern	Killed	60	23	#cons	CallStatement[271]	['true']	516	"malloc(sizeof(int) * length)"
@Pattern	Killed	32	17	#cons	WaitAssignStatement[275]	[]	516	"malloc(sizeof(int) * length)"
@Pattern	Killed	32	17	#cons	WaitAssignStatement[275]	['true']	516	"malloc(sizeof(int) * length)"
@Pattern	Killed	31	17	#expr	WaitExpression[273]	[]	516	"malloc(sizeof(int) * length)"
@Pattern	Killed	31	17	#expr	WaitExpression[273]	['malloc((4) * (length))']	516	"malloc(sizeof(int) * length)"
@Pattern	Killed	31	17	#stat	Implicator[274]	[]	516	"malloc(sizeof(int) * length)"
@Pattern	Killed	31	17	#stat	Implicator[274]	['@(malloc((4) * (length)))']	516	"malloc(sizeof(int) * length)"
@Pattern	Killed	31	17	#stat	Implicator[274]	['@(malloc((4) * (length)))', 'chg_addr']	516	"malloc(sizeof(int) * length)"
@Pattern	Killed	31	17	#stat	Implicator[274]	['chg_addr']	516	"malloc(sizeof(int) * length)"
@Pattern	Killed	30	4	#trap	CallStatement[271]	[]	516	"malloc(sizeof(int) * length)"
@Pattern	Killed	30	4	#trap	CallStatement[271]	['trapping']	516	"malloc(sizeof(int) * length)"
@Pattern	Killed	14	2	#stat	DeferExpression[296]	[]	519	"list[k - 1]"
@Pattern	Killed	3	0	#stat	DeferExpression[296]	['@(-(atoi(argv[k])))']	519	"list[k - 1]"
@Pattern	Killed	14	2	#stat	DeferExpression[296]	['chg_numb']	519	"list[k - 1]"
@Pattern	Killed	3	0	#stat	DeferExpression[296]	['@(-(atoi(argv[k])))', 'chg_numb']	519	"list[k - 1]"
@Pattern	Killed	15	2	#cons	BinAssignStatement[309]	[]	519	"list[k - 1] = atoi(argv[k])"
@Pattern	Killed	2	0	#cons	BinAssignStatement[309]	['(atoi(argv[k])) != (0)']	519	"list[k - 1] = atoi(argv[k])"
@Pattern	Killed	14	2	#expr	Implicator[308]	[]	519	"atoi(argv[k])"
@Pattern	Killed	3	0	#expr	Implicator[308]	['-(atoi(argv[k]))']	519	"atoi(argv[k])"
@Pattern	Killed	14	2	#expr	Implicator[308]	['chg_numb']	519	"atoi(argv[k])"
@Pattern	Killed	3	0	#expr	Implicator[308]	['-(atoi(argv[k]))', 'chg_numb']	519	"atoi(argv[k])"
@Pattern	Killed	18	1	#cons	WaitAssignStatement[307]	[]	519	"atoi(argv[k])"
@Pattern	Killed	18	1	#cons	WaitAssignStatement[307]	['true']	519	"atoi(argv[k])"
@Pattern	Killed	5	0	#trap	WaitAssignStatement[307]	[]	519	"atoi(argv[k])"
@Pattern	Killed	6	4	#expr	ConstExpression[268]	[]	516	"sizeof(int)"
@Pattern	Killed	2	1	#expr	ConstExpression[268]	['-(4)']	516	"sizeof(int)"
@Pattern	Killed	2	1	#expr	ConstExpression[268]	['-(4)', 'chg_numb']	516	"sizeof(int)"
@Pattern	Killed	2	1	#expr	ConstExpression[268]	['-(4)', 'chg_numb', 'dec_value']	516	"sizeof(int)"
@Pattern	Killed	2	1	#expr	ConstExpression[268]	['-(4)', 'chg_numb', 'dec_value', 'set_neg']	516	"sizeof(int)"
@Pattern	Killed	2	1	#expr	ConstExpression[268]	['-(4)', 'chg_numb', 'set_neg']	516	"sizeof(int)"
@Pattern	Killed	2	1	#expr	ConstExpression[268]	['-(4)', 'dec_value']	516	"sizeof(int)"
@Pattern	Killed	2	1	#expr	ConstExpression[268]	['-(4)', 'dec_value', 'set_neg']	516	"sizeof(int)"
@Pattern	Killed	2	1	#expr	ConstExpression[268]	['-(4)', 'set_neg']	516	"sizeof(int)"
@Pattern	Killed	6	4	#expr	ConstExpression[268]	['chg_numb']	516	"sizeof(int)"
@Pattern	Killed	6	1	#expr	ConstExpression[268]	['chg_numb', 'dec_value']	516	"sizeof(int)"
@Pattern	Killed	3	1	#expr	ConstExpression[268]	['chg_numb', 'dec_value', 'set_neg']	516	"sizeof(int)"
@Pattern	Killed	3	1	#expr	ConstExpression[268]	['chg_numb', 'set_neg']	516	"sizeof(int)"
@Pattern	Killed	6	1	#expr	ConstExpression[268]	['dec_value']	516	"sizeof(int)"
@Pattern	Killed	3	1	#expr	ConstExpression[268]	['dec_value', 'set_neg']	516	"sizeof(int)"
@Pattern	Killed	3	1	#expr	ConstExpression[268]	['set_neg']	516	"sizeof(int)"
@Pattern	Killed	7	5	#expr	Identifier[269]	[]	516	"length"
@Pattern	Killed	2	1	#expr	Identifier[269]	['-(length)']	516	"length"
@Pattern	Killed	2	1	#expr	Identifier[269]	['-(length)', 'chg_numb']	516	"length"
@Pattern	Killed	7	5	#expr	Identifier[269]	['chg_numb']	516	"length"
@Pattern	Killed	38	3	#cons	CallStatement[303]	[]	519	"atoi(argv[k])"
@Pattern	Killed	38	3	#cons	CallStatement[303]	['true']	519	"atoi(argv[k])"
@Pattern	Killed	13	1	#refr	DeferExpression[302]	[]	519	"argv[k]"
@Pattern	Killed	2	1	#refr	DeferExpression[302]	['*((argv) + (-(k)))']	519	"argv[k]"
@Pattern	Killed	2	1	#refr	DeferExpression[302]	['*((argv) + (-(k)))', 'chg_addr']	519	"argv[k]"
@Pattern	Killed	13	1	#refr	DeferExpression[302]	['chg_addr']	519	"argv[k]"
@Pattern	Killed	11	1	#expr	Identifier[300]	[]	519	"k"
@Pattern	Killed	2	1	#expr	Identifier[300]	['-(k)']	519	"k"
@Pattern	Killed	2	1	#expr	Identifier[300]	['-(k)', 'chg_numb']	519	"k"
@Pattern	Killed	11	1	#expr	Identifier[300]	['chg_numb']	519	"k"
@Pattern	Killed	13	1	#stat	Implicator[306]	[]	519	"atoi(argv[k])"
@Pattern	Killed	13	1	#stat	Implicator[306]	['@(atoi(*((argv) + (k))))']	519	"atoi(argv[k])"
@Pattern	Killed	13	1	#stat	Implicator[306]	['@(atoi(*((argv) + (k))))', 'chg_numb']	519	"atoi(argv[k])"
@Pattern	Killed	13	1	#stat	Implicator[306]	['chg_numb']	519	"atoi(argv[k])"
@Pattern	Killed	13	1	#expr	WaitExpression[305]	[]	519	"atoi(argv[k])"
@Pattern	Killed	13	1	#expr	WaitExpression[305]	['atoi(*((argv) + (k)))']	519	"atoi(argv[k])"
@Pattern	Killed	13	1	#expr	ArithExpression[301]	[]
@Pattern	Killed	2	1	#expr	ArithExpression[301]	['(argv) + (-(k))']
@Pattern	Killed	2	1	#expr	ArithExpression[301]	['(argv) + (-(k))', 'chg_addr']
@Pattern	Killed	13	1	#expr	ArithExpression[301]	['chg_addr']
@Pattern	Killed	22	2	#trap	CallStatement[303]	[]	519	"atoi(argv[k])"
@Pattern	Killed	22	2	#trap	CallStatement[303]	['trapping']	519	"atoi(argv[k])"
@Pattern	Killed	3	0	#expr	ArithExpression[321]	[]
@Pattern	Killed	5	2	#cons	IncreAssignStatement[323]	[]	517	"k++"
@Pattern	Killed	5	2	#cons	IncreAssignStatement[323]	['true']	517	"k++"
@Pattern	Killed	3	0	#stat	Identifier[322]	[]	517	"k"
@Pattern	Unknown	2	2	#trap	IncreAssignStatement[323]	[]	517	"k++"
@Pattern	Unknown	2	2	#trap	IncreAssignStatement[323]	['trapping']	517	"k++"
@Pattern	Killed	1	0	#cons	InitAssignStatement[252]	[]	514	"* list"
@Pattern	Killed	1	0	#trap	InitAssignStatement[252]	[]	514	"* list"
@Pattern	Killed	1	0	#trap	WaitAssignStatement[275]	[]	516	"malloc(sizeof(int) * length)"
@Pattern	Killed	2	0	#trap	ReturnAssignStatement[330]	[]	521	"return list;"
@Pattern	Killed	2	0	#cons	ReturnAssignStatement[330]	[]	521	"return list;"
@Pattern	Killed	2	0	#trap	BinAssignStatement[309]	[]	519	"list[k - 1] = atoi(argv[k])"
@Pattern	Killed	2	0	#refr	Identifier[260]	[]	515	"argc"
@Pattern	Killed	2	0	#refr	Identifier[285]	[]	517	"k"
@Pattern	Killed	2	0	#refr	Identifier[286]	[]	517	"argc"
@Pattern	Unknown	1	1	#refr	Identifier[269]	[]	516	"length"
@Pattern	Alive	0	1	#refr	Identifier[269]	['argc']	516	"length"
@Pattern	Unknown	1	1	#refr	Identifier[269]	['chg_numb']	516	"length"
@Pattern	Alive	0	1	#refr	Identifier[269]	['argc', 'chg_numb']	516	"length"
@Pattern	Killed	2	0	#refr	Identifier[300]	[]	519	"k"
@Pattern	Killed	4	0	#stat	Identifier[260]	[]	515	"argc"
@Pattern	Killed	4	0	#stat	Identifier[285]	[]	517	"k"
@Pattern	Killed	4	0	#stat	Identifier[286]	[]	517	"argc"
@Pattern	Alive	1	3	#stat	Identifier[269]	[]	516	"length"
@Pattern	Alive	0	2	#stat	Identifier[269]	['(length) + (1)']	516	"length"
@Pattern	Alive	1	3	#stat	Identifier[269]	['chg_numb']	516	"length"
@Pattern	Alive	0	2	#stat	Identifier[269]	['(length) + (1)', 'chg_numb']	516	"length"
@Pattern	Alive	0	2	#stat	Identifier[269]	['chg_numb', 'inc_value']	516	"length"
@Pattern	Alive	0	2	#stat	Identifier[269]	['inc_value']	516	"length"
@Pattern	Killed	4	0	#stat	Identifier[300]	[]	519	"k"
@Pattern	Killed	1	0	#flow	InitAssignStatement[258]	[]	514	"k"
@Pattern	Killed	1	0	#cons	InitAssignStatement[258]	[]	514	"k"
@Pattern	Killed	1	0	#flow	BinAssignStatement[263]	[]	515	"length = argc - 1"
@Pattern	Killed	2	0	#cons	BinAssignStatement[279]	[]	516	"list = (int *) malloc(sizeof(int) * length)"
@Pattern	Killed	2	0	#flow	BinAssignStatement[279]	[]	516	"list = (int *) malloc(sizeof(int) * length)"
@Pattern	Killed	2	0	#flow	IfStatement[288]	[]	517	"for(k = 1; k < argc; k++)  {   list[k - 1] = atoi(argv[k]);  }"
@Pattern	Killed	582	104	#cons	IfStatement[357]	[]	528	"for(i = 0; i < n; i++)     {         x = list[i];         if(x % 3 == 0)         {             fprintf(stdout, "%s; ", "F");         }         else if(x % 5 == 0)         {             fprintf(stdout, "%s; ", "B");         }         else if(x % 7 == 0)         {             fprintf(stdout, "%s; ", "K");         }         else         {          fprintf(stdout, "%d; ", x);         }     }"
@Pattern	Alive	14	17	#cons	IfStatement[357]	['!((i) < (n))']	528	"for(i = 0; i < n; i++)     {         x = list[i];         if(x % 3 == 0)         {             fprintf(stdout, "%s; ", "F");         }         else if(x % 5 == 0)         {             fprintf(stdout, "%s; ", "B");         }         else if(x % 7 == 0)         {             fprintf(stdout, "%s; ", "K");         }         else         {          fprintf(stdout, "%d; ", x);         }     }"
@Pattern	Killed	649	114	#cons	CallStatement[505]	[]	556	"fizz_buzz(list, argc-1)"
@Pattern	Killed	649	114	#cons	CallStatement[505]	['true']	556	"fizz_buzz(list, argc-1)"
@Pattern	Killed	3	2	#trap	WaitAssignStatement[470]	[]	548	"fprintf(stdout, "\n")"
@Pattern	Killed	3	2	#trap	WaitAssignStatement[470]	['trapping']	548	"fprintf(stdout, "\n")"
@Pattern	Killed	386	56	#cons	WaitAssignStatement[495]	[]	555	"parse_input(argc, argv)"
@Pattern	Killed	386	56	#cons	WaitAssignStatement[495]	['true']	555	"parse_input(argc, argv)"
@Pattern	Killed	3	2	#cons	WaitAssignStatement[470]	[]	548	"fprintf(stdout, "\n")"
@Pattern	Killed	3	2	#cons	WaitAssignStatement[470]	['true']	548	"fprintf(stdout, "\n")"
@Pattern	Killed	39	7	#expr	RelationExpression[356]	[]	528	"i < n"
@Pattern	Alive	0	2	#expr	RelationExpression[356]	['-((i) < (n))']	528	"i < n"
@Pattern	Killed	39	7	#expr	RelationExpression[356]	['not_bool']	528	"i < n"
@Pattern	Alive	0	2	#expr	RelationExpression[356]	['-((i) < (n))', 'not_bool']	528	"i < n"
@Pattern	Killed	32	3	#trap	IfStatement[357]	[]	528	"for(i = 0; i < n; i++)     {         x = list[i];         if(x % 3 == 0)         {             fprintf(stdout, "%s; ", "F");         }         else if(x % 5 == 0)         {             fprintf(stdout, "%s; ", "B");         }         else if(x % 7 == 0)         {             fprintf(stdout, "%s; ", "K");         }         else         {          fprintf(stdout, "%d; ", x);         }     }"
@Pattern	Killed	32	3	#trap	IfStatement[357]	['trapping']	528	"for(i = 0; i < n; i++)     {         x = list[i];         if(x % 3 == 0)         {             fprintf(stdout, "%s; ", "F");         }         else if(x % 5 == 0)         {             fprintf(stdout, "%s; ", "B");         }         else if(x % 7 == 0)         {             fprintf(stdout, "%s; ", "K");         }         else         {          fprintf(stdout, "%d; ", x);         }     }"
@Pattern	Killed	25	7	#cons	BinAssignStatement[352]	[]	528	"i = 0"
@Pattern	Alive	1	2	#cons	BinAssignStatement[352]	['(0) != (0)']	528	"i = 0"
@Pattern	Killed	15	4	#expr	ConstExpression[351]	[]	528	"0"
@Pattern	Alive	0	3	#expr	ConstExpression[351]	['-(0)']	528	"0"
@Pattern	Killed	15	4	#stat	Identifier[350]	[]	528	"i"
@Pattern	Alive	0	3	#stat	Identifier[350]	['@(-(0))']	528	"i"
@Pattern	Killed	15	4	#stat	Identifier[350]	['chg_numb']	528	"i"
@Pattern	Alive	0	3	#stat	Identifier[350]	['@(-(0))', 'chg_numb']	528	"i"
@Pattern	Alive	0	4	#stat	Identifier[350]	['chg_numb', 'set_zro']	528	"i"
@Pattern	Alive	0	4	#stat	Identifier[350]	['set_zro']	528	"i"
@Pattern	Killed	9	3	#trap	BinAssignStatement[352]	[]	528	"i = 0"
@Pattern	Killed	9	3	#trap	BinAssignStatement[352]	['trapping']	528	"i = 0"
@Pattern	Killed	11	1	#expr	Identifier[354]	[]	528	"i"
@Pattern	Killed	2	1	#expr	Identifier[354]	['-(i)']	528	"i"
@Pattern	Killed	2	1	#expr	Identifier[354]	['-(i)', 'chg_numb']	528	"i"
@Pattern	Killed	11	1	#expr	Identifier[354]	['chg_numb']	528	"i"
@Pattern	Killed	11	1	#expr	Identifier[355]	[]	528	"n"
@Pattern	Killed	2	1	#expr	Identifier[355]	['-(n)']	528	"n"
@Pattern	Killed	2	1	#expr	Identifier[355]	['-(n)', 'chg_numb']	528	"n"
@Pattern	Killed	11	1	#expr	Identifier[355]	['chg_numb']	528	"n"
@Pattern	Killed	427	72	#cons	IfStatement[372]	[]	531	"if(x % 3 == 0)         {             fprintf(stdout, "%s; ", "F");         }         else if(x % 5 == 0)         {             fprintf(stdout, "%s; ", "B");         }         else if(x % 7 == 0)         {             fprintf(stdout, "%s; ", "K");         }         else         {          fprintf(stdout, "%d; ", x);         }"
@Pattern	Alive	1	2	#cons	IfStatement[372]	['(((x) % (3)) == (0)) > (0)']	531	"if(x % 3 == 0)         {             fprintf(stdout, "%s; ", "F");         }         else if(x % 5 == 0)         {             fprintf(stdout, "%s; ", "B");         }         else if(x % 7 == 0)         {             fprintf(stdout, "%s; ", "K");         }         else         {          fprintf(stdout, "%d; ", x);         }"
@Pattern	Killed	67	16	#expr	RelationExpression[371]	[]	531	"x % 3 == 0"
@Pattern	Alive	0	2	#expr	RelationExpression[371]	['-(((x) % (3)) == (0))']	531	"x % 3 == 0"
@Pattern	Killed	67	13	#expr	RelationExpression[371]	['not_bool']	531	"x % 3 == 0"
@Pattern	Alive	0	2	#expr	RelationExpression[371]	['-(((x) % (3)) == (0))', 'not_bool']	531	"x % 3 == 0"
@Pattern	Killed	69	8	#trap	IfStatement[372]	[]	531	"if(x % 3 == 0)         {             fprintf(stdout, "%s; ", "F");         }         else if(x % 5 == 0)         {             fprintf(stdout, "%s; ", "B");         }         else if(x % 7 == 0)         {             fprintf(stdout, "%s; ", "K");         }         else         {          fprintf(stdout, "%d; ", x);         }"
@Pattern	Killed	69	8	#trap	IfStatement[372]	['trapping']	531	"if(x % 3 == 0)         {             fprintf(stdout, "%s; ", "F");         }         else if(x % 5 == 0)         {             fprintf(stdout, "%s; ", "B");         }         else if(x % 7 == 0)         {             fprintf(stdout, "%s; ", "K");         }         else         {          fprintf(stdout, "%d; ", x);         }"
@Pattern	Killed	31	1	#stat	Identifier[360]	[]	530	"x"
@Pattern	Killed	3	0	#stat	Identifier[360]	['@(-(*((list) + (i))))']	530	"x"
@Pattern	Killed	31	1	#stat	Identifier[360]	['chg_numb']	530	"x"
@Pattern	Killed	3	0	#stat	Identifier[360]	['@(-(*((list) + (i))))', 'chg_numb']	530	"x"
@Pattern	Killed	64	4	#cons	BinAssignStatement[365]	[]	530	"x = list[i]"
@Pattern	Killed	3	0	#cons	BinAssignStatement[365]	['(*((list) + (i))) != (0)']	530	"x = list[i]"
@Pattern	Killed	18	0	#expr	DeferExpression[364]	[]	530	"list[i]"
@Pattern	Killed	30	1	#trap	BinAssignStatement[365]	[]	530	"x = list[i]"
@Pattern	Killed	30	1	#trap	BinAssignStatement[365]	['trapping']	530	"x = list[i]"
@Pattern	Killed	40	11	#expr	ArithExpression[369]	[]	531	"x % 3"
@Pattern	Alive	0	3	#expr	ArithExpression[369]	['-((x) % (3))']	531	"x % 3"
@Pattern	Killed	40	11	#expr	ArithExpression[369]	['chg_numb']	531	"x % 3"
@Pattern	Alive	0	3	#expr	ArithExpression[369]	['-((x) % (3))', 'chg_numb']	531	"x % 3"
@Pattern	Killed	10	3	#expr	ConstExpression[370]	[]	531	"0"
@Pattern	Alive	0	3	#expr	ConstExpression[370]	['-(0)']	531	"0"
@Pattern	Killed	69	14	#expr	RelationExpression[392]	[]	535	"x % 5 == 0"
@Pattern	Alive	0	2	#expr	RelationExpression[392]	['-(((x) % (5)) == (0))']	535	"x % 5 == 0"
@Pattern	Killed	69	11	#expr	RelationExpression[392]	['not_bool']	535	"x % 5 == 0"
@Pattern	Alive	0	2	#expr	RelationExpression[392]	['-(((x) % (5)) == (0))', 'not_bool']	535	"x % 5 == 0"
@Pattern	Killed	294	49	#cons	IfStatement[393]	[]	535	"if(x % 5 == 0)         {             fprintf(stdout, "%s; ", "B");         }         else if(x % 7 == 0)         {             fprintf(stdout, "%s; ", "K");         }         else         {          fprintf(stdout, "%d; ", x);         }"
@Pattern	Killed	130	20	#cons	IfStatement[393]	['true']	535	"if(x % 5 == 0)         {             fprintf(stdout, "%s; ", "B");         }         else if(x % 7 == 0)         {             fprintf(stdout, "%s; ", "K");         }         else         {          fprintf(stdout, "%d; ", x);         }"
@Pattern	Killed	68	9	#trap	IfStatement[393]	[]	535	"if(x % 5 == 0)         {             fprintf(stdout, "%s; ", "B");         }         else if(x % 7 == 0)         {             fprintf(stdout, "%s; ", "K");         }         else         {          fprintf(stdout, "%d; ", x);         }"
@Pattern	Killed	68	9	#trap	IfStatement[393]	['trapping']	535	"if(x % 5 == 0)         {             fprintf(stdout, "%s; ", "B");         }         else if(x % 7 == 0)         {             fprintf(stdout, "%s; ", "K");         }         else         {          fprintf(stdout, "%d; ", x);         }"
@Pattern	Killed	13	1	#refr	DeferExpression[364]	[]	530	"list[i]"
@Pattern	Killed	2	1	#refr	DeferExpression[364]	['*((list) + (-(i)))']	530	"list[i]"
@Pattern	Killed	2	1	#refr	DeferExpression[364]	['*((list) + (-(i)))', 'chg_numb']	530	"list[i]"
@Pattern	Killed	13	1	#refr	DeferExpression[364]	['chg_numb']	530	"list[i]"
@Pattern	Killed	13	1	#expr	ArithExpression[363]	[]
@Pattern	Killed	2	1	#expr	ArithExpression[363]	['(list) + (-(i))']
@Pattern	Killed	2	1	#expr	ArithExpression[363]	['(list) + (-(i))', 'chg_addr']
@Pattern	Killed	13	1	#expr	ArithExpression[363]	['chg_addr']
@Pattern	Killed	11	1	#expr	Identifier[362]	[]	530	"i"
@Pattern	Killed	2	1	#expr	Identifier[362]	['-(i)']	530	"i"
@Pattern	Killed	2	1	#expr	Identifier[362]	['-(i)', 'chg_numb']	530	"i"
@Pattern	Killed	11	1	#expr	Identifier[362]	['chg_numb']	530	"i"
@Pattern	Killed	7	5	#expr	Identifier[367]	[]	531	"x"
@Pattern	Alive	0	3	#expr	Identifier[367]	['-(x)']	531	"x"
@Pattern	Killed	7	5	#expr	Identifier[367]	['chg_numb']	531	"x"
@Pattern	Alive	0	3	#expr	Identifier[367]	['-(x)', 'chg_numb']	531	"x"
@Pattern	Killed	10	3	#expr	ConstExpression[368]	[]	531	"3"
@Pattern	Alive	0	3	#expr	ConstExpression[368]	['-(3)']	531	"3"
@Pattern	Killed	10	3	#expr	ConstExpression[368]	['chg_numb']	531	"3"
@Pattern	Alive	0	3	#expr	ConstExpression[368]	['-(3)', 'chg_numb']	531	"3"
@Pattern	Killed	5	3	#expr	ConstExpression[368]	['chg_numb', 'dec_value']	531	"3"
@Pattern	Alive	0	3	#expr	ConstExpression[368]	['-(3)', 'chg_numb', 'dec_value']	531	"3"
@Pattern	Alive	1	3	#expr	ConstExpression[368]	['chg_numb', 'dec_value', 'set_neg']	531	"3"
@Pattern	Alive	0	3	#expr	ConstExpression[368]	['-(3)', 'chg_numb', 'dec_value', 'set_neg']	531	"3"
@Pattern	Alive	1	3	#expr	ConstExpression[368]	['chg_numb', 'set_neg']	531	"3"
@Pattern	Alive	0	3	#expr	ConstExpression[368]	['-(3)', 'chg_numb', 'set_neg']	531	"3"
@Pattern	Killed	5	3	#expr	ConstExpression[368]	['dec_value']	531	"3"
@Pattern	Alive	0	3	#expr	ConstExpression[368]	['-(3)', 'dec_value']	531	"3"
@Pattern	Alive	1	3	#expr	ConstExpression[368]	['dec_value', 'set_neg']	531	"3"
@Pattern	Alive	0	3	#expr	ConstExpression[368]	['-(3)', 'dec_value', 'set_neg']	531	"3"
@Pattern	Alive	1	3	#expr	ConstExpression[368]	['set_neg']	531	"3"
@Pattern	Alive	0	3	#expr	ConstExpression[368]	['-(3)', 'set_neg']	531	"3"
@Pattern	Killed	42	9	#expr	ArithExpression[390]	[]	535	"x % 5"
@Pattern	Alive	0	3	#expr	ArithExpression[390]	['-((x) % (5))']	535	"x % 5"
@Pattern	Killed	42	9	#expr	ArithExpression[390]	['chg_numb']	535	"x % 5"
@Pattern	Alive	0	3	#expr	ArithExpression[390]	['-((x) % (5))', 'chg_numb']	535	"x % 5"
@Pattern	Killed	10	3	#expr	ConstExpression[391]	[]	535	"0"
@Pattern	Alive	0	3	#expr	ConstExpression[391]	['-(0)']	535	"0"
@Pattern	Killed	160	27	#cons	IfStatement[414]	[]	539	"if(x % 7 == 0)         {             fprintf(stdout, "%s; ", "K");         }         else         {          fprintf(stdout, "%d; ", x);         }"
@Pattern	Killed	130	20	#cons	IfStatement[414]	['true']	539	"if(x % 7 == 0)         {             fprintf(stdout, "%s; ", "K");         }         else         {          fprintf(stdout, "%d; ", x);         }"
@Pattern	Killed	69	14	#expr	RelationExpression[413]	[]	539	"x % 7 == 0"
@Pattern	Alive	0	2	#expr	RelationExpression[413]	['-(((x) % (7)) == (0))']	539	"x % 7 == 0"
@Pattern	Killed	69	11	#expr	RelationExpression[413]	['not_bool']	539	"x % 7 == 0"
@Pattern	Alive	0	2	#expr	RelationExpression[413]	['-(((x) % (7)) == (0))', 'not_bool']	539	"x % 7 == 0"
@Pattern	Killed	68	9	#trap	IfStatement[414]	[]	539	"if(x % 7 == 0)         {             fprintf(stdout, "%s; ", "K");         }         else         {          fprintf(stdout, "%d; ", x);         }"
@Pattern	Killed	68	9	#trap	IfStatement[414]	['trapping']	539	"if(x % 7 == 0)         {             fprintf(stdout, "%s; ", "K");         }         else         {          fprintf(stdout, "%d; ", x);         }"
@Pattern	Killed	3	2	#cons	WaitAssignStatement[384]	[]	533	"fprintf(stdout, "%s; ", "F")"
@Pattern	Killed	3	2	#cons	WaitAssignStatement[384]	['true']	533	"fprintf(stdout, "%s; ", "F")"
@Pattern	Killed	3	2	#trap	WaitAssignStatement[384]	[]	533	"fprintf(stdout, "%s; ", "F")"
@Pattern	Killed	3	2	#trap	WaitAssignStatement[384]	['trapping']	533	"fprintf(stdout, "%s; ", "F")"
@Pattern	Killed	9	3	#expr	Identifier[388]	[]	535	"x"
@Pattern	Alive	0	3	#expr	Identifier[388]	['-(x)']	535	"x"
@Pattern	Killed	9	3	#expr	Identifier[388]	['chg_numb']	535	"x"
@Pattern	Alive	0	3	#expr	Identifier[388]	['-(x)', 'chg_numb']	535	"x"
@Pattern	Killed	10	3	#expr	ConstExpression[389]	[]	535	"5"
@Pattern	Alive	0	3	#expr	ConstExpression[389]	['-(5)']	535	"5"
@Pattern	Killed	10	3	#expr	ConstExpression[389]	['chg_numb']	535	"5"
@Pattern	Alive	0	3	#expr	ConstExpression[389]	['-(5)', 'chg_numb']	535	"5"
@Pattern	Killed	6	3	#expr	ConstExpression[389]	['chg_numb', 'dec_value']	535	"5"
@Pattern	Alive	0	3	#expr	ConstExpression[389]	['-(5)', 'chg_numb', 'dec_value']	535	"5"
@Pattern	Alive	1	3	#expr	ConstExpression[389]	['chg_numb', 'dec_value', 'set_neg']	535	"5"
@Pattern	Alive	0	3	#expr	ConstExpression[389]	['-(5)', 'chg_numb', 'dec_value', 'set_neg']	535	"5"
@Pattern	Alive	1	3	#expr	ConstExpression[389]	['chg_numb', 'set_neg']	535	"5"
@Pattern	Alive	0	3	#expr	ConstExpression[389]	['-(5)', 'chg_numb', 'set_neg']	535	"5"
@Pattern	Killed	6	3	#expr	ConstExpression[389]	['dec_value']	535	"5"
@Pattern	Alive	0	3	#expr	ConstExpression[389]	['-(5)', 'dec_value']	535	"5"
@Pattern	Alive	1	3	#expr	ConstExpression[389]	['dec_value', 'set_neg']	535	"5"
@Pattern	Alive	0	3	#expr	ConstExpression[389]	['-(5)', 'dec_value', 'set_neg']	535	"5"
@Pattern	Alive	1	3	#expr	ConstExpression[389]	['set_neg']	535	"5"
@Pattern	Alive	0	3	#expr	ConstExpression[389]	['-(5)', 'set_neg']	535	"5"
@Pattern	Killed	42	9	#expr	ArithExpression[411]	[]	539	"x % 7"
@Pattern	Alive	0	3	#expr	ArithExpression[411]	['-((x) % (7))']	539	"x % 7"
@Pattern	Killed	42	9	#expr	ArithExpression[411]	['chg_numb']	539	"x % 7"
@Pattern	Alive	0	3	#expr	ArithExpression[411]	['-((x) % (7))', 'chg_numb']	539	"x % 7"
@Pattern	Killed	10	3	#expr	ConstExpression[412]	[]	539	"0"
@Pattern	Alive	0	3	#expr	ConstExpression[412]	['-(0)']	539	"0"
@Pattern	Killed	3	2	#cons	WaitAssignStatement[405]	[]	537	"fprintf(stdout, "%s; ", "B")"
@Pattern	Killed	3	2	#cons	WaitAssignStatement[405]	['true']	537	"fprintf(stdout, "%s; ", "B")"
@Pattern	Killed	3	2	#trap	WaitAssignStatement[405]	[]	537	"fprintf(stdout, "%s; ", "B")"
@Pattern	Killed	3	2	#trap	WaitAssignStatement[405]	['trapping']	537	"fprintf(stdout, "%s; ", "B")"
@Pattern	Killed	9	3	#expr	Identifier[409]	[]	539	"x"
@Pattern	Alive	0	3	#expr	Identifier[409]	['-(x)']	539	"x"
@Pattern	Killed	9	3	#expr	Identifier[409]	['chg_numb']	539	"x"
@Pattern	Alive	0	3	#expr	Identifier[409]	['-(x)', 'chg_numb']	539	"x"
@Pattern	Killed	10	3	#expr	ConstExpression[410]	[]	539	"7"
@Pattern	Alive	0	3	#expr	ConstExpression[410]	['-(7)']	539	"7"
@Pattern	Killed	10	3	#expr	ConstExpression[410]	['chg_numb']	539	"7"
@Pattern	Alive	0	3	#expr	ConstExpression[410]	['-(7)', 'chg_numb']	539	"7"
@Pattern	Killed	7	3	#expr	ConstExpression[410]	['chg_numb', 'dec_value']	539	"7"
@Pattern	Alive	0	3	#expr	ConstExpression[410]	['-(7)', 'chg_numb', 'dec_value']	539	"7"
@Pattern	Alive	1	3	#expr	ConstExpression[410]	['chg_numb', 'dec_value', 'set_neg']	539	"7"
@Pattern	Alive	0	3	#expr	ConstExpression[410]	['-(7)', 'chg_numb', 'dec_value', 'set_neg']	539	"7"
@Pattern	Alive	1	3	#expr	ConstExpression[410]	['chg_numb', 'set_neg']	539	"7"
@Pattern	Alive	0	3	#expr	ConstExpression[410]	['-(7)', 'chg_numb', 'set_neg']	539	"7"
@Pattern	Killed	7	3	#expr	ConstExpression[410]	['dec_value']	539	"7"
@Pattern	Alive	0	3	#expr	ConstExpression[410]	['-(7)', 'dec_value']	539	"7"
@Pattern	Alive	1	3	#expr	ConstExpression[410]	['dec_value', 'set_neg']	539	"7"
@Pattern	Alive	0	3	#expr	ConstExpression[410]	['-(7)', 'dec_value', 'set_neg']	539	"7"
@Pattern	Alive	1	3	#expr	ConstExpression[410]	['set_neg']	539	"7"
@Pattern	Alive	0	3	#expr	ConstExpression[410]	['-(7)', 'set_neg']	539	"7"
@Pattern	Killed	3	2	#trap	WaitAssignStatement[426]	[]	541	"fprintf(stdout, "%s; ", "K")"
@Pattern	Killed	3	2	#trap	WaitAssignStatement[426]	['trapping']	541	"fprintf(stdout, "%s; ", "K")"
@Pattern	Killed	3	2	#cons	WaitAssignStatement[426]	[]	541	"fprintf(stdout, "%s; ", "K")"
@Pattern	Killed	3	2	#cons	WaitAssignStatement[426]	['true']	541	"fprintf(stdout, "%s; ", "K")"
@Pattern	Killed	17	2	#cons	WaitAssignStatement[439]	[]	545	"fprintf(stdout, "%d; ", x)"
@Pattern	Killed	17	2	#cons	WaitAssignStatement[439]	['true']	545	"fprintf(stdout, "%d; ", x)"
@Pattern	Killed	3	2	#trap	WaitAssignStatement[439]	[]	545	"fprintf(stdout, "%d; ", x)"
@Pattern	Killed	3	2	#trap	WaitAssignStatement[439]	['trapping']	545	"fprintf(stdout, "%d; ", x)"
@Pattern	Killed	12	0	#expr	Identifier[434]	[]	545	"x"
@Pattern	Killed	14	0	#expr	WaitExpression[437]	[]	545	"fprintf(stdout, "%d; ", x)"
@Pattern	Killed	23	3	#cons	CallStatement[435]	[]	545	"fprintf(stdout, "%d; ", x)"
@Pattern	Killed	2	0	#cons	CallStatement[435]	['(x) != (0)']	545	"fprintf(stdout, "%d; ", x)"
@Pattern	Killed	14	0	#stat	Implicator[438]	[]	545	"fprintf(stdout, "%d; ", x)"
@Pattern	Killed	8	1	#trap	CallStatement[435]	[]	545	"fprintf(stdout, "%d; ", x)"
@Pattern	Killed	8	1	#trap	CallStatement[435]	['trapping']	545	"fprintf(stdout, "%d; ", x)"
@Pattern	Killed	6	1	#cons	IncreAssignStatement[457]	[]	528	"i++"
@Pattern	Killed	6	1	#cons	IncreAssignStatement[457]	['true']	528	"i++"
@Pattern	Killed	3	0	#expr	ArithExpression[455]	[]
@Pattern	Killed	3	0	#stat	Identifier[456]	[]	528	"i"
@Pattern	Killed	3	1	#trap	IncreAssignStatement[457]	[]	528	"i++"
@Pattern	Killed	3	1	#trap	IncreAssignStatement[457]	['trapping']	528	"i++"
@Pattern	Killed	1	0	#cons	InitAssignStatement[346]	[]	527	"i"
@Pattern	Killed	1	0	#trap	InitAssignStatement[346]	[]	527	"i"
@Pattern	Killed	1	0	#trap	CallStatement[466]	[]	548	"fprintf(stdout, "\n")"
@Pattern	Killed	2	0	#cons	CallStatement[466]	[]	548	"fprintf(stdout, "\n")"
@Pattern	Killed	2	0	#trap	CallStatement[380]	[]	533	"fprintf(stdout, "%s; ", "F")"
@Pattern	Killed	3	0	#cons	CallStatement[380]	[]	533	"fprintf(stdout, "%s; ", "F")"
@Pattern	Killed	3	0	#cons	CallStatement[401]	[]	537	"fprintf(stdout, "%s; ", "B")"
@Pattern	Killed	2	0	#trap	CallStatement[401]	[]	537	"fprintf(stdout, "%s; ", "B")"
@Pattern	Killed	2	0	#trap	CallStatement[422]	[]	541	"fprintf(stdout, "%s; ", "K")"
@Pattern	Killed	3	0	#cons	CallStatement[422]	[]	541	"fprintf(stdout, "%s; ", "K")"
@Pattern	Killed	2	0	#refr	Identifier[354]	[]	528	"i"
@Pattern	Killed	2	0	#refr	Identifier[355]	[]	528	"n"
@Pattern	Killed	2	0	#refr	Identifier[362]	[]	530	"i"
@Pattern	Killed	2	0	#refr	Identifier[367]	[]	531	"x"
@Pattern	Killed	2	0	#refr	Identifier[388]	[]	535	"x"
@Pattern	Killed	2	0	#refr	Identifier[409]	[]	539	"x"
@Pattern	Killed	2	0	#refr	Identifier[434]	[]	545	"x"
@Pattern	Killed	4	0	#stat	Identifier[354]	[]	528	"i"
@Pattern	Killed	4	0	#stat	Identifier[355]	[]	528	"n"
@Pattern	Unknown	2	2	#stat	DeferExpression[364]	[]	530	"list[i]"
@Pattern	Unknown	1	1	#stat	DeferExpression[364]	['(*((list) + (i))) + (1)']	530	"list[i]"
@Pattern	Unknown	1	1	#stat	DeferExpression[364]	['(*((list) + (i))) + (1)', 'chg_numb']	530	"list[i]"
@Pattern	Unknown	1	1	#stat	DeferExpression[364]	['(*((list) + (i))) + (1)', 'chg_numb', 'inc_value']	530	"list[i]"
@Pattern	Unknown	1	1	#stat	DeferExpression[364]	['(*((list) + (i))) + (1)', 'inc_value']	530	"list[i]"
@Pattern	Unknown	2	2	#stat	DeferExpression[364]	['chg_numb']	530	"list[i]"
@Pattern	Unknown	1	1	#stat	DeferExpression[364]	['chg_numb', 'inc_value']	530	"list[i]"
@Pattern	Unknown	1	1	#stat	DeferExpression[364]	['inc_value']	530	"list[i]"
@Pattern	Killed	4	0	#stat	Identifier[362]	[]	530	"i"
@Pattern	Killed	4	0	#stat	Identifier[367]	[]	531	"x"
@Pattern	Killed	4	0	#stat	Identifier[388]	[]	535	"x"
@Pattern	Killed	4	0	#stat	Identifier[409]	[]	539	"x"
@Pattern	Unknown	2	2	#stat	Identifier[434]	[]	545	"x"
@Pattern	Unknown	1	1	#stat	Identifier[434]	['(x) + (1)']	545	"x"
@Pattern	Unknown	1	1	#stat	Identifier[434]	['(x) + (1)', 'chg_numb']	545	"x"
@Pattern	Unknown	1	1	#stat	Identifier[434]	['(x) + (1)', 'chg_numb', 'inc_value']	545	"x"
@Pattern	Unknown	1	1	#stat	Identifier[434]	['(x) + (1)', 'inc_value']	545	"x"
@Pattern	Unknown	2	2	#stat	Identifier[434]	['chg_numb']	545	"x"
@Pattern	Unknown	1	1	#stat	Identifier[434]	['chg_numb', 'inc_value']	545	"x"
@Pattern	Unknown	1	1	#stat	Identifier[434]	['inc_value']	545	"x"
@Pattern	Killed	2	0	#cons	InitAssignStatement[349]	[]	527	"x"
@Pattern	Killed	2	0	#flow	InitAssignStatement[349]	[]	527	"x"
@Pattern	Killed	1	0	#flow	IfEndStatement[461]	[]	528	"for(i = 0; i < n; i++)     {         x = list[i];         if(x % 3 == 0)         {             fprintf(stdout, "%s; ", "F");         }         else if(x % 5 == 0)         {             fprintf(stdout, "%s; ", "B");         }         else if(x % 7 == 0)         {             fprintf(stdout, "%s; ", "K");         }         else         {          fprintf(stdout, "%d; ", x);         }     }"
@Pattern	Killed	1	0	#cons	IfEndStatement[461]	[]	528	"for(i = 0; i < n; i++)     {         x = list[i];         if(x % 3 == 0)         {             fprintf(stdout, "%s; ", "F");         }         else if(x % 5 == 0)         {             fprintf(stdout, "%s; ", "B");         }         else if(x % 7 == 0)         {             fprintf(stdout, "%s; ", "K");         }         else         {          fprintf(stdout, "%d; ", x);         }     }"
@Pattern	Killed	2	0	#flow	IfStatement[357]	[]	528	"for(i = 0; i < n; i++)     {         x = list[i];         if(x % 3 == 0)         {             fprintf(stdout, "%s; ", "F");         }         else if(x % 5 == 0)         {             fprintf(stdout, "%s; ", "B");         }         else if(x % 7 == 0)         {             fprintf(stdout, "%s; ", "K");         }         else         {          fprintf(stdout, "%d; ", x);         }     }"
@Pattern	Killed	1	0	#flow	BinAssignStatement[365]	[]	530	"x = list[i]"
@Pattern	Killed	2	0	#flow	IfStatement[372]	[]	531	"if(x % 3 == 0)         {             fprintf(stdout, "%s; ", "F");         }         else if(x % 5 == 0)         {             fprintf(stdout, "%s; ", "B");         }         else if(x % 7 == 0)         {             fprintf(stdout, "%s; ", "K");         }         else         {          fprintf(stdout, "%d; ", x);         }"
@Pattern	Killed	2	0	#flow	IfStatement[393]	[]	535	"if(x % 5 == 0)         {             fprintf(stdout, "%s; ", "B");         }         else if(x % 7 == 0)         {             fprintf(stdout, "%s; ", "K");         }         else         {          fprintf(stdout, "%d; ", x);         }"
@Pattern	Killed	2	0	#flow	IfStatement[414]	[]	539	"if(x % 7 == 0)         {             fprintf(stdout, "%s; ", "K");         }         else         {          fprintf(stdout, "%d; ", x);         }"
@Pattern	Alive	0	11	#expr	ConstExpression[520]	[]	558	"0"
@Pattern	Alive	4	14	#cons	ReturnAssignStatement[522]	[]	558	"return 0;"
@Pattern	Alive	4	14	#cons	ReturnAssignStatement[522]	['true']	558	"return 0;"
@Pattern	Alive	0	11	#stat	ReturnPoint[521]	[]	558	"return"
@Pattern	Killed	51	18	#cons	WaitAssignStatement[509]	[]	556	"fizz_buzz(list, argc-1)"
@Pattern	Killed	51	18	#cons	WaitAssignStatement[509]	['true']	556	"fizz_buzz(list, argc-1)"
@Pattern	Killed	4	3	#trap	ReturnAssignStatement[522]	[]	558	"return 0;"
@Pattern	Killed	4	3	#trap	ReturnAssignStatement[522]	['trapping']	558	"return 0;"
@Pattern	Killed	44	3	#expr	WaitExpression[507]	[]	556	"fizz_buzz(list, argc-1)"
@Pattern	Killed	44	3	#expr	WaitExpression[507]	['fizz_buzz(list, (argc) - (1))']	556	"fizz_buzz(list, argc-1)"
@Pattern	Killed	44	3	#expr	ArithExpression[504]	[]	556	"argc-1"
@Pattern	Killed	2	1	#expr	ArithExpression[504]	['-((argc) - (1))']	556	"argc-1"
@Pattern	Killed	2	1	#expr	ArithExpression[504]	['-((argc) - (1))', 'chg_numb']	556	"argc-1"
@Pattern	Killed	44	3	#expr	ArithExpression[504]	['chg_numb']	556	"argc-1"
@Pattern	Killed	44	3	#stat	Implicator[508]	[]	556	"fizz_buzz(list, argc-1)"
@Pattern	Killed	44	3	#stat	Implicator[508]	['@(fizz_buzz(list, (argc) - (1)))']	556	"fizz_buzz(list, argc-1)"
@Pattern	Killed	44	3	#stat	Implicator[508]	['@(fizz_buzz(list, (argc) - (1)))', 'chg_bytes']	556	"fizz_buzz(list, argc-1)"
@Pattern	Killed	44	3	#stat	Implicator[508]	['chg_bytes']	556	"fizz_buzz(list, argc-1)"
@Pattern	Killed	28	5	#trap	CallStatement[505]	[]	556	"fizz_buzz(list, argc-1)"
@Pattern	Killed	28	5	#trap	CallStatement[505]	['trapping']	556	"fizz_buzz(list, argc-1)"
@Pattern	Killed	11	1	#expr	Identifier[489]	[]	555	"argc"
@Pattern	Killed	2	1	#expr	Identifier[489]	['-(argc)']	555	"argc"
@Pattern	Killed	2	1	#expr	Identifier[489]	['-(argc)', 'chg_numb']	555	"argc"
@Pattern	Killed	11	1	#expr	Identifier[489]	['chg_numb']	555	"argc"
@Pattern	Killed	11	1	#expr	WaitExpression[493]	[]	555	"parse_input(argc, argv)"
@Pattern	Killed	11	1	#expr	WaitExpression[493]	['parse_input(argc, argv)']	555	"parse_input(argc, argv)"
@Pattern	Killed	11	1	#stat	Implicator[494]	[]	555	"parse_input(argc, argv)"
@Pattern	Killed	11	1	#stat	Implicator[494]	['@(parse_input(argc, argv))']	555	"parse_input(argc, argv)"
@Pattern	Killed	11	1	#stat	Implicator[494]	['@(parse_input(argc, argv))', 'chg_addr']	555	"parse_input(argc, argv)"
@Pattern	Killed	11	1	#stat	Implicator[494]	['chg_addr']	555	"parse_input(argc, argv)"
@Pattern	Killed	4	2	#trap	CallStatement[491]	[]	555	"parse_input(argc, argv)"
@Pattern	Killed	4	2	#trap	CallStatement[491]	['trapping']	555	"parse_input(argc, argv)"
@Pattern	Killed	11	1	#expr	Identifier[502]	[]	556	"argc"
@Pattern	Killed	2	1	#expr	Identifier[502]	['-(argc)']	556	"argc"
@Pattern	Killed	2	1	#expr	Identifier[502]	['-(argc)', 'chg_numb']	556	"argc"
@Pattern	Killed	11	1	#expr	Identifier[502]	['chg_numb']	556	"argc"
@Pattern	Killed	10	1	#expr	ConstExpression[503]	[]	556	"1"
@Pattern	Killed	2	1	#expr	ConstExpression[503]	['-(1)']	556	"1"
@Pattern	Killed	2	1	#expr	ConstExpression[503]	['-(1)', 'chg_numb']	556	"1"
@Pattern	Killed	2	1	#expr	ConstExpression[503]	['-(1)', 'chg_numb', 'dec_value']	556	"1"
@Pattern	Killed	2	1	#expr	ConstExpression[503]	['-(1)', 'chg_numb', 'dec_value', 'set_neg']	556	"1"
@Pattern	Killed	2	1	#expr	ConstExpression[503]	['-(1)', 'chg_numb', 'set_neg']	556	"1"
@Pattern	Killed	2	1	#expr	ConstExpression[503]	['-(1)', 'dec_value']	556	"1"
@Pattern	Killed	2	1	#expr	ConstExpression[503]	['-(1)', 'dec_value', 'set_neg']	556	"1"
@Pattern	Killed	2	1	#expr	ConstExpression[503]	['-(1)', 'set_neg']	556	"1"
@Pattern	Killed	10	1	#expr	ConstExpression[503]	['chg_numb']	556	"1"
@Pattern	Killed	7	1	#expr	ConstExpression[503]	['chg_numb', 'dec_value']	556	"1"
@Pattern	Killed	5	1	#expr	ConstExpression[503]	['chg_numb', 'dec_value', 'set_neg']	556	"1"
@Pattern	Killed	5	1	#expr	ConstExpression[503]	['chg_numb', 'set_neg']	556	"1"
@Pattern	Killed	7	1	#expr	ConstExpression[503]	['dec_value']	556	"1"
@Pattern	Killed	5	1	#expr	ConstExpression[503]	['dec_value', 'set_neg']	556	"1"
@Pattern	Killed	5	1	#expr	ConstExpression[503]	['set_neg']	556	"1"
@Pattern	Killed	1	0	#trap	InitAssignStatement[485]	[]	554	"* list"
@Pattern	Killed	2	0	#cons	InitAssignStatement[485]	[]	554	"* list"
@Pattern	Killed	1	0	#trap	WaitAssignStatement[495]	[]	555	"parse_input(argc, argv)"
@Pattern	Killed	1	0	#trap	WaitAssignStatement[509]	[]	556	"fizz_buzz(list, argc-1)"
@Pattern	Killed	1	0	#trap	CallStatement[514]	[]	557	"free(list)"
@Pattern	Unknown	1	1	#cons	CallStatement[514]	[]	557	"free(list)"
@Pattern	Unknown	1	1	#cons	CallStatement[514]	['true']	557	"free(list)"
@Pattern	Killed	1	0	#trap	WaitAssignStatement[518]	[]	557	"free(list)"
@Pattern	Killed	1	0	#cons	WaitAssignStatement[518]	[]	557	"free(list)"
@Pattern	Killed	4	0	#stat	Identifier[489]	[]	555	"argc"
@Pattern	Unknown	2	2	#stat	Identifier[502]	[]	556	"argc"
@Pattern	Unknown	1	1	#stat	Identifier[502]	['(argc) + (1)']	556	"argc"
@Pattern	Unknown	1	1	#stat	Identifier[502]	['(argc) + (1)', 'chg_numb']	556	"argc"
@Pattern	Unknown	1	1	#stat	Identifier[502]	['(argc) + (1)', 'chg_numb', 'inc_value']	556	"argc"
@Pattern	Unknown	1	1	#stat	Identifier[502]	['(argc) + (1)', 'inc_value']	556	"argc"
@Pattern	Unknown	2	2	#stat	Identifier[502]	['chg_numb']	556	"argc"
@Pattern	Unknown	1	1	#stat	Identifier[502]	['chg_numb', 'inc_value']	556	"argc"
@Pattern	Unknown	1	1	#stat	Identifier[502]	['inc_value']	556	"argc"
@Pattern	Killed	1	0	#flow	InitAssignStatement[485]	[]	554	"* list"
@Pattern	Killed	1	0	#cons	BinAssignStatement[497]	[]	555	"list = parse_input(argc, argv)"
@Pattern	Killed	1	0	#flow	BinAssignStatement[497]	[]	555	"list = parse_input(argc, argv)"
@Pattern	Alive	0	1	#flow	WaitAssignStatement[509]	[]	556	"fizz_buzz(list, argc-1)"
