package com.jcsa.jcmutest.project.files;

import java.io.File;

import com.jcsa.jcparse.test.CommandUtil;

/**
 * It defines the structure of files organized in the C mutation test project:<br>
 * <br>
 * 	<code>
 * 	[root]																	<br>
 * 	|--	[code]																<br>
 * 	|--	|--	[cfiles]	// xxx.c source files before pre-processed			<br>
 * 	|--	|--	[ifiles]	// xxx.i source files after pre-processing			<br>
 * 	|--	|--	[sfiles]	// xxx.s source files being instrumentation			<br>
 * 	|--	|--	[mfiles]	// xxx.m source files being mutated by a mutant		<br>
 * 	|--	|--	[hfiles]	// xxx.h header files for compiling programs		<br>
 * 	|--	|--	[lfiles]	// xxx.lib library files for linking programs		<br>
 * 	|-- [data]																<br>
 * 	|--	|--	[mudata]	// xxx.m files in which mutations are preserved		<br>
 * 	|--	|--	[inputs]	// input data used for executing program testing	<br>
 * 	|--	|--	[n_output]	// normal output data								<br>
 * 	|--	|--	[s_output]	// output generated by executing instrumental one	<br>
 * 	|--	|--	[m_output]	// output produced by executing mutation			<br>
 * 	|--	|--	test.suite	// it preserves the test suite used for testing		<br>
 * 	|--	|--	[trash]		// instrument.txt|out|err...						<br>
 * 	|--	|--	[logs]		// xxx.log which mutants are killed by which tests	<br>
 * 	|-- [config]		// c_template_file, c_macro_file, jcmutest.h, jcinst.h
 * 						   {compiler.name, language_standard, compile_param}<br>
 * 	|--	[efiles]		// executional programs or shell script for testing	<br>
 * 	</code>
 * <br>
 * @author yukimula
 *
 */
public class JMTestProjectFiles {
	
	/* file-name-definition */
	private static final String code_name = "code";
	private static final String cfiles_name = "cfiles";
	private static final String ifiles_name = "ifiles";
	private static final String sfiles_name = "sfiles";
	private static final String mfiles_name = "mfiles";
	private static final String hfiles_name = "hfiles";
	private static final String lfiles_name = "lfiles";
	private static final String data_name = "data";
	private static final String mudata_name = "mudata";
	private static final String inputs_name = "inputs";
	private static final String n_output_name = "n_output";
	private static final String s_output_name = "s_output";
	private static final String m_output_name = "m_output";
	private static final String test_suite_name = "test.suite";
	private static final String logs_name = "logs";
	private static final String trash_name = "trash";
	private static final String config_name = "config";
	private static final String efiles_name = "efiles";
	
	/* attributes */
	private File root;
	private File cfiles;
	private File ifiles;
	private File sfiles;
	private File mfiles;
	private File hfiles;
	private File lfiles;
	private File mudata;
	private File inputs;
	private File n_output;
	private File s_output;
	private File m_output;
	private File test_suite;
	private File trash;
	private File logs;
	private File config;
	private File efiles;
	
	/* constructor */
	private File try_to_mkdir(File file) throws Exception {
		if(!file.exists())
			CommandUtil.make_directory(file);
		return file;
	}
	private File try_to_create(File file) throws Exception {
		if(!file.exists())
			CommandUtil.write_text(file, "");
		return file;
	}
	protected JMTestProjectFiles(File root) throws Exception {
		this.root = this.try_to_mkdir(root);
		File code = this.try_to_mkdir(new File(root.getAbsolutePath() + "/" + code_name));
		this.cfiles = this.try_to_mkdir(new File(code.getAbsolutePath() + "/" + cfiles_name));
		this.ifiles = this.try_to_mkdir(new File(code.getAbsolutePath() + "/" + ifiles_name));
		this.sfiles = this.try_to_mkdir(new File(code.getAbsolutePath() + "/" + sfiles_name));
		this.mfiles = this.try_to_mkdir(new File(code.getAbsolutePath() + "/" + mfiles_name));
		this.hfiles = this.try_to_mkdir(new File(code.getAbsolutePath() + "/" + hfiles_name));
		this.lfiles = this.try_to_mkdir(new File(code.getAbsolutePath() + "/" + lfiles_name));
		
		File data = this.try_to_mkdir(new File(root.getAbsolutePath() + "/" + data_name));
		this.mudata = this.try_to_mkdir(new File(data.getAbsolutePath() + "/" + mudata_name));
		this.inputs = this.try_to_mkdir(new File(data.getAbsolutePath() + "/" + inputs_name));
		this.n_output = this.try_to_mkdir(new File(data.getAbsolutePath() + "/" + n_output_name));
		this.s_output = this.try_to_mkdir(new File(data.getAbsolutePath() + "/" + s_output_name));
		this.m_output = this.try_to_mkdir(new File(data.getAbsolutePath() + "/" + m_output_name));
		this.trash = this.try_to_mkdir(new File(data.getAbsolutePath() + "/" + trash_name));
		this.logs = this.try_to_mkdir(new File(data.getAbsolutePath() + "/" + logs_name));
		this.test_suite = this.try_to_create(new File(data.getAbsolutePath() + "/" + test_suite_name));
		
		this.config = this.try_to_mkdir(new File(root.getAbsolutePath() + "/" + config_name));
		this.efiles = this.try_to_mkdir(new File(root.getAbsolutePath() + "/" + efiles_name));
	}
	
	/* getters */
	/**
	 * @return project directory
	 */
	public File get_root_directory() { return this.root; }
	/**
	 * @return directory where source files before preprocessing
	 */
	public File get_cfiles_directory() { return this.cfiles; }
	/**
	 * @return directory where source files after preprocessing
	 */
	public File get_ifiles_directory() { return this.ifiles; }
	/**
	 * @return directory where source files with instrumentation
	 */
	public File get_sfiles_directory() { return this.sfiles; }
	/**
	 * @return directory where source code files being mutated
	 */
	public File get_mfiles_directory() { return this.mfiles; }
	/**
	 * @return directory of header files for pre-processing
	 */
	public File get_hfiles_directory() { return this.hfiles; }
	/**
	 * @return directory of library files for linking code
	 */
	public File get_lfiles_directory() { return this.lfiles; }
	/**
	 * @return directory of mutation data are preserved
	 */
	public File get_mudata_directory() { return this.mudata; }
	/**
	 * @return directory of inputs data are used
	 */
	public File get_inputs_directory() { return this.inputs; }
	/**
	 * @return test suite file preserves the test input data
	 */
	public File get_test_suite_file() { return this.test_suite; }
	/**
	 * @return normal output directory
	 */
	public File get_n_output_directory() { return this.n_output; }
	/**
	 * @return instrumental test outputs
	 */
	public File get_s_output_directory() { return this.s_output; }
	/**
	 * @return mutation output information
	 */
	public File get_m_output_directory() { return this.m_output; }
	/**
	 * @return to preserve trash files in testing
	 */
	public File get_trash_directory() { return this.trash; }
	/**
	 * @return to preserve the mutation test results
	 */
	public File get_logs_directory() { return this.logs; }
	/**
	 * @return directory of configuration data
	 */
	public File get_config_directory() { return this.config; }
	/**
	 * @return directory of executional programs
	 */
	public File get_efiles_directory() { return this.efiles; }
	
}
